#!/usr/bin/env python3
"""
Script de prueba para verificar las correcciones implementadas
"""

import logging
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.edge.options import Options

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('test_correcciones.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def test_correcciones():
    """Prueba las correcciones implementadas"""
    
    logger.info("üß™ PROBANDO CORRECCIONES IMPLEMENTADAS")
    logger.info("=" * 60)
    
    # Configurar Edge
    edge_options = Options()
    # edge_options.add_argument("--headless")  # Comentar para ver el navegador
    edge_options.add_argument("--no-sandbox")
    edge_options.add_argument("--disable-dev-shm-usage")
    edge_options.add_argument("--window-size=1920,1080")
    
    driver = None
    try:
        # Crear driver
        driver = webdriver.Edge(options=edge_options)
        driver.set_page_load_timeout(30)
        
        # Simular datos del mensaje RabbitMQ
        datos_mensaje = {
            'IdFactura': 12345,
            'IdAseguradora': 67890,
            'NumDocIdentidad': '0102158896',
            'PersonaPrimerNombre': 'FABIAN',
            'PersonaSegundoNombre': 'MAURICIO',
            'PersonaPrimerApellido': 'BELTRAN',
            'PersonaSegundoApellido': 'NARVAEZ'
        }
        
        logger.info("üìã DATOS DEL MENSAJE RABBITMQ:")
        for campo, valor in datos_mensaje.items():
            logger.info(f"   ‚Ä¢ {campo}: '{valor}'")
        
        # PASO 1: Construir nombre completo
        logger.info("=" * 60)
        logger.info("üîç PASO 1: Construyendo nombre completo del cliente...")
        
        nombre_completo = construir_nombre_completo(datos_mensaje)
        logger.info(f"‚úÖ Nombre completo construido: '{nombre_completo}'")
        
        # PASO 2: Navegar directamente a la p√°gina de b√∫squeda
        logger.info("=" * 60)
        logger.info("üîç PASO 2: Navegando directamente a p√°gina de b√∫squeda...")
        
        url_busqueda = "https://benefitsdirect.palig.com/Inicio/Contenido/InfoAsegurado/MisPolizasPVR.aspx"
        logger.info(f"üåê Navegando a: {url_busqueda}")
        driver.get(url_busqueda)
        
        # Esperar a que cargue la p√°gina
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        logger.info("‚úÖ P√°gina de b√∫squeda cargada")
        
        # PASO 3: Probar la l√≥gica de reintento
        logger.info("=" * 60)
        logger.info("üîç PASO 3: Probando l√≥gica de reintento...")
        
        # Simular b√∫squeda de elemento con reintento
        selector_campo = 'input[name="ctl00$ContenidoPrincipal$CtrlBuscaAseguradoProv$txtIdentificacionAseg"]'
        selector_boton = 'a[id="ContenidoPrincipal_CtrlBuscaAseguradoProv_lnkBuscar"]'
        
        try:
            # Buscar campo con reintento
            logger.info("üîç Buscando campo de identificaci√≥n...")
            campo = buscar_elemento_con_reintento(driver, selector_campo, "Campo de Identificaci√≥n")
            
            if campo:
                logger.info("‚úÖ Campo encontrado - Llenando con datos...")
                campo.clear()
                campo.send_keys(datos_mensaje['NumDocIdentidad'])
                logger.info(f"‚úÖ Campo llenado con: {datos_mensaje['NumDocIdentidad']}")
                
                # Buscar bot√≥n con reintento
                logger.info("üîç Buscando bot√≥n de b√∫squeda...")
                boton = buscar_boton_con_reintento(driver, selector_boton, "Bot√≥n de B√∫squeda")
                
                if boton:
                    logger.info("‚úÖ Bot√≥n encontrado - Haciendo clic...")
                    boton.click()
                    logger.info("‚úÖ Click ejecutado")
                    
                    # Esperar resultados
                    time.sleep(5)
                    logger.info("‚úÖ B√∫squeda completada")
                else:
                    logger.error("‚ùå Bot√≥n no encontrado")
            else:
                logger.error("‚ùå Campo no encontrado")
                
        except Exception as e:
            logger.error(f"‚ùå Error en prueba: {e}")
        
        # Resumen final
        logger.info("=" * 60)
        logger.info("üéØ RESUMEN DE LA PRUEBA:")
        logger.info(f"   üìç URL final: {driver.current_url}")
        logger.info(f"   üìÑ T√≠tulo final: {driver.title}")
        logger.info("‚úÖ Prueba completada")
        
    except Exception as e:
        logger.error(f"‚ùå Error en prueba: {e}")
        logger.error(f"   üìç Error tipo: {type(e).__name__}")
        
    finally:
        if driver:
            logger.info("üîå Cerrando navegador...")
            driver.quit()

def construir_nombre_completo(datos_mensaje):
    """Construye el nombre completo del cliente"""
    primer_nombre = datos_mensaje.get('PersonaPrimerNombre', '').strip()
    segundo_nombre = datos_mensaje.get('PersonaSegundoNombre', '').strip()
    primer_apellido = datos_mensaje.get('PersonaPrimerApellido', '').strip()
    segundo_apellido = datos_mensaje.get('PersonaSegundoApellido', '').strip()
    
    nombre_completo = f"{primer_nombre} {segundo_nombre} {primer_apellido} {segundo_apellido}".strip()
    return nombre_completo

def buscar_elemento_con_reintento(driver, selector, nombre_campo, max_reintentos=2):
    """Busca un elemento con reintento de recarga de p√°gina si no se encuentra"""
    for intento in range(1, max_reintentos + 1):
        try:
            logger.info(f"üîç Buscando elemento '{nombre_campo}' (intento {intento}/{max_reintentos})...")
            logger.info(f"   üìç Selector: {selector}")
            
            # Intentar encontrar el elemento
            elemento = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, selector))
            )
            
            logger.info(f"‚úÖ Elemento '{nombre_campo}' encontrado en intento {intento}")
            return elemento
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Elemento '{nombre_campo}' no encontrado en intento {intento}")
            logger.warning(f"   üìç Error: {e}")
            
            if intento < max_reintentos:
                logger.info(f"üîÑ Recargando p√°gina para intento {intento + 1}...")
                logger.info(f"   üìç URL actual: {driver.current_url}")
                
                # Recargar la p√°gina
                driver.refresh()
                time.sleep(3)  # Esperar a que se recargue
                
                logger.info(f"‚úÖ P√°gina recargada - URL: {driver.current_url}")
            else:
                logger.error(f"‚ùå Elemento '{nombre_campo}' no encontrado despu√©s de {max_reintentos} intentos")
                return None
    
    return None

def buscar_boton_con_reintento(driver, selector, nombre_campo, max_reintentos=2):
    """Busca un bot√≥n con reintento de recarga de p√°gina si no se encuentra"""
    for intento in range(1, max_reintentos + 1):
        try:
            logger.info(f"üîç Buscando bot√≥n '{nombre_campo}' (intento {intento}/{max_reintentos})...")
            logger.info(f"   üìç Selector: {selector}")
            
            # Intentar encontrar el bot√≥n
            boton = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
            )
            
            logger.info(f"‚úÖ Bot√≥n '{nombre_campo}' encontrado en intento {intento}")
            return boton
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Bot√≥n '{nombre_campo}' no encontrado en intento {intento}")
            logger.warning(f"   üìç Error: {e}")
            
            if intento < max_reintentos:
                logger.info(f"üîÑ Recargando p√°gina para intento {intento + 1}...")
                logger.info(f"   üìç URL actual: {driver.current_url}")
                
                # Recargar la p√°gina
                driver.refresh()
                time.sleep(3)  # Esperar a que se recargue
                
                logger.info(f"‚úÖ P√°gina recargada - URL: {driver.current_url}")
            else:
                logger.error(f"‚ùå Bot√≥n '{nombre_campo}' no encontrado despu√©s de {max_reintentos} intentos")
                return None
    
    return None

if __name__ == "__main__":
    test_correcciones()
