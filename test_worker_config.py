#!/usr/bin/env python3
"""
Script de prueba para verificar la configuraci√≥n del worker con Edge
"""

import logging
import sys
from src.config import Config
from src.database import DatabaseManager

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_configuration():
    """Prueba la configuraci√≥n del worker"""
    
    logger.info("üöÄ INICIANDO PRUEBA DE CONFIGURACI√ìN DEL WORKER")
    logger.info("=" * 60)
    
    try:
        # 1. Validar configuraci√≥n
        logger.info("üîç Validando configuraci√≥n...")
        errores = Config.validar_configuracion()
        
        if errores:
            logger.error("‚ùå Errores de configuraci√≥n encontrados:")
            for error in errores:
                logger.error(f"   ‚Ä¢ {error}")
            return False
        
        logger.info("‚úÖ Configuraci√≥n v√°lida")
        
        # 2. Mostrar configuraci√≥n
        logger.info("üìã Configuraci√≥n del sistema:")
        logger.info(f"   ‚Ä¢ SQL Server: {Config.SQL_SERVER_HOST}")
        logger.info(f"   ‚Ä¢ Base de datos: {Config.SQL_SERVER_DATABASE}")
        logger.info(f"   ‚Ä¢ RabbitMQ: {Config.RABBITMQ_HOST}:{Config.RABBITMQ_PORT}")
        logger.info(f"   ‚Ä¢ Cola: {Config.RABBITMQ_QUEUE}")
        logger.info(f"   ‚Ä¢ Exchange: {Config.RABBITMQ_EXCHANGE}")
        
        # 3. Probar conexi√≥n a base de datos
        logger.info("üîå Probando conexi√≥n a base de datos...")
        db_manager = DatabaseManager()
        
        if db_manager.test_connection():
            logger.info("‚úÖ Conexi√≥n a base de datos exitosa")
        else:
            logger.error("‚ùå Error conectando a base de datos")
            return False
        
        # 4. Probar consulta simple
        logger.info("üîç Probando consulta simple...")
        try:
            result = db_manager.execute_query("SELECT 1 as test")
            if result:
                logger.info("‚úÖ Consulta de prueba exitosa")
            else:
                logger.warning("‚ö†Ô∏è Consulta de prueba sin resultados")
        except Exception as e:
            logger.error(f"‚ùå Error en consulta de prueba: {e}")
            return False
        
        # 5. Verificar tabla de aseguradoras
        logger.info("üîç Verificando tabla de aseguradoras...")
        try:
            aseguradoras = db_manager.execute_query("SELECT TOP 5 nombre FROM urls_automatizacion")
            if aseguradoras:
                logger.info(f"‚úÖ Encontradas {len(aseguradoras)} aseguradoras:")
                for aseguradora in aseguradoras:
                    logger.info(f"   ‚Ä¢ {aseguradora['nombre']}")
            else:
                logger.warning("‚ö†Ô∏è No se encontraron aseguradoras")
        except Exception as e:
            logger.error(f"‚ùå Error consultando aseguradoras: {e}")
            return False
        
        logger.info("=" * 60)
        logger.info("üéØ CONFIGURACI√ìN DEL WORKER VERIFICADA EXITOSAMENTE")
        logger.info("‚úÖ El worker est√° listo para ejecutarse con Edge")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error en prueba de configuraci√≥n: {e}")
        return False

if __name__ == "__main__":
    success = test_configuration()
    sys.exit(0 if success else 1)
