#!/usr/bin/env python3
"""
Script de prueba para verificar la b√∫squeda de cliente por nombre completo
"""

import logging
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.edge.options import Options

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('test_busqueda_cliente.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def test_busqueda_cliente():
    """Prueba la b√∫squeda de cliente por nombre completo"""
    
    # Configurar Edge
    edge_options = Options()
    # edge_options.add_argument("--headless")  # Comentar para ver el navegador
    edge_options.add_argument("--no-sandbox")
    edge_options.add_argument("--disable-dev-shm-usage")
    edge_options.add_argument("--window-size=1920,1080")
    
    driver = None
    try:
        logger.info("üöÄ INICIANDO PRUEBA DE B√öSQUEDA DE CLIENTE")
        logger.info("=" * 60)
        
        # Crear driver
        driver = webdriver.Edge(options=edge_options)
        driver.set_page_load_timeout(30)
        
        # Simular datos del mensaje RabbitMQ
        datos_mensaje = {
            'PersonaPrimerNombre': 'FABIAN',
            'PersonaSegundoNombre': 'MAURICIO',
            'PersonaPrimerApellido': 'BELTRAN',
            'PersonaSegundoApellido': 'NARVAEZ',
            'NumDocIdentidad': '1234567890'
        }
        
        # Construir nombre completo
        nombre_completo = construir_nombre_completo(datos_mensaje)
        logger.info(f"üë§ Nombre completo construido: '{nombre_completo}'")
        
        # Simular HTML de la tabla (como vendr√≠a de la p√°gina)
        html_tabla = """
        <table class="GridViewStylePV" cellspacing="0" cellpadding="5" rules="all" border="1" id="ContenidoPrincipal_CtrlBuscaAseguradoProv_gridAsegurados" style="border-collapse:collapse;">
            <tbody>
                <tr class="HeaderStylePV">
                    <th scope="col" style="width:85px;">P√≥liza</th>
                    <th scope="col" style="width:80px;">Certificado</th>
                    <th scope="col" style="width:105px;">No. Dependiente</th>
                    <th scope="col" style="width:122px;">Nombre del Paciente</th>
                    <th scope="col" style="width:122px;">Titular</th>
                    <th scope="col" style="width:80px;">Relacion</th>
                    <th scope="col" style="width:112px;">Tipo de P√≥liza</th>
                    <th scope="col" style="width:110px;">Status</th>
                    <th scope="col" style="width:40px;">&nbsp;</th>
                    <th class="hide" scope="col">Dependiente</th>
                </tr>
                <tr class="RowStylePV">
                    <td style="width:85px;">77224</td>
                    <td style="width:80px;">0000000463</td>
                    <td style="width:105px;">0</td>
                    <td style="width:122px;">FABIAN MAURICIO BELTRAN NARVAEZ</td>
                    <td style="width:122px;">FABIAN MAURICIO BELTRAN NARVAEZ</td>
                    <td style="width:80px;">&nbsp;</td>
                    <td style="width:112px;">Grupos Corporativos</td>
                    <td align="center" style="width:110px;">
                        <div style="position: relative">
                            <div id="ContenidoPrincipal_CtrlBuscaAseguradoProv_gridAsegurados_pStatusActivoText_0" class="rectangle-green">
                                <span id="ContenidoPrincipal_CtrlBuscaAseguradoProv_gridAsegurados_lbStatusActivoText_0">Activo</span>
                            </div>
                            <div class="floatingText">
                                <span>VER</span>
                            </div>
                        </div>
                    </td>
                    <td style="width:40px;"><input type="image" src="../../../images/eye.png" alt="VER" onclick="javascript:__doPostBack('ctl00$ContenidoPrincipal$CtrlBuscaAseguradoProv$gridAsegurados','Select$0');return false;"></td>
                    <td class="hide">19801130</td>
                </tr>
                <tr class="RowStylePV">
                    <td style="width:85px;">77224</td>
                    <td style="width:80px;">0000000463</td>
                    <td style="width:105px;">C2</td>
                    <td style="width:122px;">VERONICA ALEXANDRA INGA BRAVO</td>
                    <td style="width:122px;">FABIAN MAURICIO BELTRAN NARVAEZ</td>
                    <td style="width:80px;">C√≥nyuge</td>
                    <td style="width:112px;">Grupos Corporativos</td>
                    <td align="center" style="width:110px;">
                        <div style="position: relative">
                            <div id="ContenidoPrincipal_CtrlBuscaAseguradoProv_gridAsegurados_pStatusActivoText_1" class="rectangle-green">
                                <span id="ContenidoPrincipal_CtrlBuscaAseguradoProv_gridAsegurados_lbStatusActivoText_1">Activo</span>
                            </div>
                            <div class="floatingText">
                                <span>VER</span>
                            </div>
                        </div>
                    </td>
                    <td style="width:40px;"><input type="image" src="../../../images/eye.png" alt="VER" onclick="javascript:__doPostBack('ctl00$ContenidoPrincipal$CtrlBuscaAseguradoProv$gridAsegurados','Select$1');return false;"></td>
                    <td class="hide">19850210</td>
                </tr>
            </tbody>
        </table>
        """
        
        # Simular la l√≥gica de b√∫squeda del worker
        logger.info("üîç Simulando b√∫squeda de cliente en la tabla...")
        
        # Simular que encontramos la tabla y la procesamos
        filas_simuladas = [
            {
                'P√≥liza': '77224',
                'Certificado': '0000000463',
                'No. Dependiente': '0',
                'Nombre del Paciente': 'FABIAN MAURICIO BELTRAN NARVAEZ',
                'Titular': 'FABIAN MAURICIO BELTRAN NARVAEZ',
                'Relacion': '',
                'Tipo de P√≥liza': 'Grupos Corporativos',
                'Status': 'Activo'
            },
            {
                'P√≥liza': '77224',
                'Certificado': '0000000463',
                'No. Dependiente': 'C2',
                'Nombre del Paciente': 'VERONICA ALEXANDRA INGA BRAVO',
                'Titular': 'FABIAN MAURICIO BELTRAN NARVAEZ',
                'Relacion': 'C√≥nyuge',
                'Tipo de P√≥liza': 'Grupos Corporativos',
                'Status': 'Activo'
            }
        ]
        
        # Buscar el cliente
        cliente_encontrado = None
        for i, fila in enumerate(filas_simuladas, 1):
            logger.info(f"üîç Verificando fila {i}: {fila.get('Nombre del Paciente', 'N/A')}")
            
            if es_cliente_buscado(fila, nombre_completo):
                if validar_cliente_activo(fila):
                    cliente_encontrado = fila
                    logger.info(f"üéØ ¬°CLIENTE ENCONTRADO Y VALIDADO en fila {i}!")
                    break
                else:
                    logger.warning(f"‚ö†Ô∏è Cliente encontrado pero NO est√° activo en fila {i}")
            else:
                logger.info(f"‚ÑπÔ∏è No es el cliente buscado en fila {i}")
        
        # Mostrar resultado
        if cliente_encontrado:
            logger.info("=" * 60)
            logger.info("üéØ CLIENTE ENCONTRADO Y VALIDADO:")
            logger.info(f"   üë§ Nombre: {cliente_encontrado.get('Nombre del Paciente', 'N/A')}")
            logger.info(f"   üìã Informaci√≥n de P√≥liza:")
            logger.info(f"      ‚Ä¢ P√≥liza: {cliente_encontrado.get('P√≥liza', 'N/A')}")
            logger.info(f"      ‚Ä¢ Certificado: {cliente_encontrado.get('Certificado', 'N/A')}")
            logger.info(f"      ‚Ä¢ No. Dependiente: {cliente_encontrado.get('No. Dependiente', 'N/A')}")
            logger.info(f"      ‚Ä¢ Relaci√≥n: {cliente_encontrado.get('Relacion', 'N/A')}")
            logger.info(f"      ‚Ä¢ Tipo de P√≥liza: {cliente_encontrado.get('Tipo de P√≥liza', 'N/A')}")
            logger.info(f"      ‚Ä¢ Status: {cliente_encontrado.get('Status', 'N/A')}")
        else:
            logger.warning(f"‚ö†Ô∏è NO SE ENCONTR√ì el cliente '{nombre_completo}' o no est√° activo")
        
        logger.info("=" * 60)
        logger.info("‚úÖ PRUEBA DE B√öSQUEDA COMPLETADA")
        
    except Exception as e:
        logger.error(f"‚ùå Error en la prueba: {e}")
        
    finally:
        if driver:
            logger.info("üîå Cerrando navegador...")
            driver.quit()

def construir_nombre_completo(datos_mensaje):
    """Construye el nombre completo del cliente concatenando las columnas del mensaje RabbitMQ"""
    try:
        # Obtener las columnas de nombre del mensaje RabbitMQ
        primer_nombre = datos_mensaje.get('PersonaPrimerNombre', '').strip()
        segundo_nombre = datos_mensaje.get('PersonaSegundoNombre', '').strip()
        primer_apellido = datos_mensaje.get('PersonaPrimerApellido', '').strip()
        segundo_apellido = datos_mensaje.get('PersonaSegundoApellido', '').strip()
        
        # Construir nombre completo con espacios entre columnas
        nombre_completo = f"{primer_nombre} {segundo_nombre} {primer_apellido} {segundo_apellido}".strip()
        
        if nombre_completo:
            logger.info(f"üîç Construyendo nombre completo desde RabbitMQ:")
            logger.info(f"   ‚Ä¢ PersonaPrimerNombre: '{primer_nombre}'")
            logger.info(f"   ‚Ä¢ PersonaSegundoNombre: '{segundo_nombre}'")
            logger.info(f"   ‚Ä¢ PersonaPrimerApellido: '{primer_apellido}'")
            logger.info(f"   ‚Ä¢ PersonaSegundoApellido: '{segundo_apellido}'")
            logger.info(f"   ‚Ä¢ Nombre Completo: '{nombre_completo}'")
            return nombre_completo
        else:
            logger.warning("‚ö†Ô∏è No se encontraron datos de nombre en el mensaje RabbitMQ")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Error construyendo nombre completo: {e}")
        return None

def es_cliente_buscado(fila_data, nombre_completo_cliente):
    """Verifica si la fila corresponde al cliente buscado"""
    try:
        nombre_paciente = fila_data.get('Nombre del Paciente', '').strip()
        if not nombre_paciente:
            return False
        
        # Comparar nombres (ignorar may√∫sculas/min√∫sculas y espacios extra)
        nombre_paciente_normalizado = ' '.join(nombre_paciente.split()).upper()
        nombre_buscado_normalizado = ' '.join(nombre_completo_cliente.split()).upper()
        
        es_cliente = nombre_paciente_normalizado == nombre_buscado_normalizado
        
        if es_cliente:
            logger.info(f"üéØ ¬°COINCIDENCIA DE NOMBRE ENCONTRADA!")
            logger.info(f"   üîç Buscado: '{nombre_completo_cliente}'")
            logger.info(f"   ‚úÖ Encontrado: '{nombre_paciente}'")
        else:
            logger.info(f"‚ÑπÔ∏è No es el cliente buscado:")
            logger.info(f"   üîç Buscado: '{nombre_completo_cliente}'")
            logger.info(f"   ‚ùå Encontrado: '{nombre_paciente}'")
        
        return es_cliente
        
    except Exception as e:
        logger.error(f"‚ùå Error verificando si es cliente buscado: {e}")
        return False

def validar_cliente_activo(fila_data):
    """Verifica si el cliente est√° activo seg√∫n el status"""
    try:
        status = fila_data.get('Status', '').strip()
        if not status:
            logger.warning("‚ö†Ô∏è No se encontr√≥ informaci√≥n de Status")
            return False
        
        # Verificar si est√° activo (ignorar may√∫sculas/min√∫sculas)
        es_activo = 'activo' in status.lower()
        
        if es_activo:
            logger.info(f"‚úÖ Cliente est√° ACTIVO - Status: '{status}'")
        else:
            logger.warning(f"‚ö†Ô∏è Cliente NO est√° activo - Status: '{status}'")
        
        return es_activo
        
    except Exception as e:
        logger.error(f"‚ùå Error validando status del cliente: {e}")
        return False

if __name__ == "__main__":
    test_busqueda_cliente()
