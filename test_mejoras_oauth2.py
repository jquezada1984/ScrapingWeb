#!/usr/bin/env python3
"""
Script de prueba para verificar las mejoras en el manejo de OAuth2
"""

import logging
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.edge.options import Options

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('test_mejoras_oauth2.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def test_mejoras_oauth2():
    """Prueba las mejoras en el manejo de OAuth2"""
    
    logger.info("üß™ PROBANDO MEJORAS EN MANEJO DE OAUTH2")
    logger.info("=" * 60)
    
    # Configurar Edge
    edge_options = Options()
    # edge_options.add_argument("--headless")  # Comentar para ver el navegador
    edge_options.add_argument("--no-sandbox")
    edge_options.add_argument("--disable-dev-shm-usage")
    edge_options.add_argument("--window-size=1920,1080")
    edge_options.add_argument("--disable-blink-features=AutomationControlled")
    edge_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    edge_options.add_experimental_option('useAutomationExtension', False)
    
    driver = None
    try:
        # Crear driver
        driver = webdriver.Edge(options=edge_options)
        driver.set_page_load_timeout(30)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        logger.info("‚úÖ Driver de Edge configurado correctamente")
        
        # PASO 1: Navegar a la p√°gina de login
        logger.info("=" * 60)
        logger.info("üîç PASO 1: Navegando a p√°gina de login...")
        
        url_login = "https://attest.palig.com/as/authorization.oauth2?client_id=cf7770f3699048ca9c61358b4dff25f5&redirect_uri=https%3A%2F%2Fbenefitsdirect.palig.com%2FInicio%2FLogin.aspx&response_type=code%20id_token&scope=openid%20profile%20email%20phone&state=OpenIdConnect.AuthenticationProperties%3DEXT82eDzm70H4FnxSn_OSRdC0ztASLp7Bvg8yLL52IEtIBpUyjD0IgIAK2j3eotEFyvMduisG7lsrN_jS47FwqP1Ye8RmSvSCWGJztHD53DbYlBg6Si-9zzt_8Efapm7-7fpkkxkUMhcPLmiLc54y6uQoA-d6uJ9jwBtbN00C1RguGixAAIRtMHyLWPVpBEQPpVPzS-6duAbBzUrsj9DrHDwEUlLYKM_XwLKtTN2C3kFXgQ6w5TVEjc7erJO16I1mxb4sAur-MV7SQAJNVbSg0smGa8JTlVV37t3I2zgvVeE1c44Hp4R72C9ivX23Ai0&response_mode=form_post&nonce=638918216386869899.ODZmNTA2ZDQtZDIwZi00MTE0LTk1NjItMjI0YWFlYzMyNzQ4MGE5YjVhOTgtMzNjNS00NDBmLTllMjAtYzg0NDY2MDkwNDc5&x-client-SKU=ID_NET451&x-client-ver=5.6.0.0"
        
        logger.info(f"üåê Navegando a: {url_login}")
        driver.get(url_login)
        
        # Esperar a que cargue la p√°gina
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        logger.info("‚úÖ P√°gina de login cargada")
        
        # PASO 2: Llenar campos de login
        logger.info("=" * 60)
        logger.info("üîç PASO 2: Llenando campos de login...")
        
        # Usuario
        usuario = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, '#username'))
        )
        usuario.clear()
        usuario.send_keys('conveniosyseguros@mediglobal.com.ec')
        logger.info("‚úÖ Usuario ingresado")
        
        # Contrase√±a
        password = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, '#password'))
        )
        password.clear()
        password.send_keys('Mediglobal1')
        logger.info("‚úÖ Contrase√±a ingresada")
        
        # Click en login
        login_btn = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, 'a[title="Inicio de sesi√≥n"]'))
        )
        login_btn.click()
        logger.info("‚úÖ Click en bot√≥n de login ejecutado")
        
        # PASO 3: Esperar redirecci√≥n OAuth2 con mejoras
        logger.info("=" * 60)
        logger.info("üîç PASO 3: Esperando redirecci√≥n OAuth2 con mejoras...")
        
        url_anterior = driver.current_url
        logger.info(f"üìç URL inicial: {url_anterior}")
        
        # Variables para control de timeout
        timeout_authorization_ping = 30  # 30 segundos m√°ximo en authorization.ping
        tiempo_inicio_ping = None
        
        for intento in range(1, 41):  # 40 intentos = 120 segundos
            time.sleep(3)
            
            url_actual = driver.current_url
            titulo_actual = driver.title
            
            if url_actual != url_anterior:
                logger.info(f"üîÑ CAMBIO DE URL DETECTADO en intento {intento}/40")
                logger.info(f"   üìç URL anterior: {url_anterior}")
                logger.info(f"   üìç URL actual: {url_actual}")
                logger.info(f"   üìÑ T√≠tulo: {titulo_actual}")
                url_anterior = url_actual
            else:
                logger.info(f"   ‚è≥ Intento {intento}/40 - URL: {url_actual[:80]}...")
                logger.info(f"      T√≠tulo: {titulo_actual}")
            
            # üîç DETECTAR P√ÅGINA DE AUTORIZACI√ìN.PING Y MANEJARLA
            if "authorization.ping" in url_actual:
                # Iniciar timer si es la primera vez que detectamos esta p√°gina
                if tiempo_inicio_ping is None:
                    tiempo_inicio_ping = time.time()
                    logger.info(f"üîÑ ESTADO INTERMEDIO OAUTH2 DETECTADO en intento {intento}")
                    logger.info(f"   üìç P√°gina de autorizaci√≥n.ping: {url_actual}")
                    logger.info(f"   üìÑ T√≠tulo de la p√°gina: {titulo_actual}")
                    logger.info(f"   ‚è≥ Esperando continuaci√≥n del flujo OAuth2...")
                else:
                    # Verificar timeout
                    tiempo_transcurrido = time.time() - tiempo_inicio_ping
                    if tiempo_transcurrido > timeout_authorization_ping:
                        logger.warning(f"‚ö†Ô∏è TIMEOUT en p√°gina authorization.ping despu√©s de {timeout_authorization_ping} segundos")
                        logger.warning(f"   üîÑ Recargando p√°gina para forzar continuaci√≥n...")
                        
                        try:
                            driver.refresh()
                            time.sleep(5)
                            tiempo_inicio_ping = None  # Resetear timer
                            continue
                        except Exception as e:
                            logger.error(f"‚ùå Error recargando p√°gina: {e}")
                            break
                
                # Buscar elementos para continuar el flujo
                logger.info(f"   üîç Buscando elementos para continuar el flujo...")
                try:
                    # Buscar botones o enlaces para continuar
                    elementos_continuar = driver.find_elements(By.CSS_SELECTOR, 
                        'input[type="submit"], button, a, input[value*="continuar"], input[value*="siguiente"]')
                    
                    if elementos_continuar:
                        logger.info(f"   ‚úÖ Encontrados {len(elementos_continuar)} elementos para continuar")
                        for i, elem in enumerate(elementos_continuar):
                            try:
                                texto = elem.text or elem.get_attribute('value') or elem.get_attribute('title') or 'sin-texto'
                                logger.info(f"      {i+1}. {elem.tag_name} - Texto: '{texto}'")
                                
                                # Intentar hacer clic en el primer elemento clickeable
                                if elem.is_enabled() and elem.is_displayed():
                                    logger.info(f"   üéØ Haciendo clic en elemento {i+1} para continuar...")
                                    elem.click()
                                    logger.info(f"   ‚úÖ Click ejecutado, esperando continuaci√≥n...")
                                    time.sleep(2)
                                    tiempo_inicio_ping = None  # Resetear timer despu√©s del click
                                    break
                            except Exception as e:
                                logger.warning(f"   ‚ö†Ô∏è No se pudo hacer clic en elemento {i+1}: {e}")
                    else:
                        logger.info(f"   ‚ÑπÔ∏è No se encontraron elementos clickeables en la p√°gina de autorizaci√≥n.ping")
                        
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è Error buscando elementos de continuaci√≥n: {e}")
                
                # Continuar esperando
                continue
            
            # Verificar si llegamos a la p√°gina final
            if "benefitsdirect.palig.com" in url_actual:
                logger.info(f"‚úÖ ¬°Redirecci√≥n detectada en intento {intento}!")
                logger.info(f"   üéØ P√°gina alcanzada: {url_actual}")
                break
        
        # Resumen final
        logger.info("=" * 60)
        logger.info("üéØ RESUMEN DE LA PRUEBA:")
        logger.info(f"   üìç URL final: {driver.current_url}")
        logger.info(f"   üìÑ T√≠tulo final: {driver.title}")
        
        if "benefitsdirect.palig.com" in driver.current_url:
            logger.info("‚úÖ ¬°√âXITO! P√°gina de beneficios alcanzada")
        else:
            logger.warning("‚ö†Ô∏è No se lleg√≥ a la p√°gina de beneficios esperada")
        
        logger.info("‚úÖ Prueba completada")
        
    except Exception as e:
        logger.error(f"‚ùå Error en prueba: {e}")
        logger.error(f"   üìç Error tipo: {type(e).__name__}")
        
    finally:
        if driver:
            logger.info("üîå Cerrando navegador...")
            driver.quit()

if __name__ == "__main__":
    test_mejoras_oauth2()
