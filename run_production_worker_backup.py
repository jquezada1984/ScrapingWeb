#!/usr/bin/env python3
"""
Worker de producci√≥n para procesar mensajes de aseguradoras continuamente
"""

import time
import logging
import signal
import sys
import json
import pika
from datetime import datetime
from src.config import Config
from src.database import DatabaseManager
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.edge.service import Service
from selenium.webdriver.edge.options import Options
from selenium.common.exceptions import TimeoutException, WebDriverException

# Configurar logging m√°s detallado para producci√≥n
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('production_worker.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

class AseguradoraProcessor:
    def __init__(self):
        self.db_manager = DatabaseManager()
        self.rabbitmq_connection = None
        self.rabbitmq_channel = None
        # Cache para URLs de aseguradoras (nombre -> url_info)
        self.url_cache = {}
        # Driver de Selenium para login autom√°tico
        self.driver = None
        
        # Gestor de sesiones por aseguradora
        self.sesiones_aseguradoras = {}
        self.aseguradoras_activas = set()
        
        logger.info("üöÄ Procesador inicializado con cach√© de URLs y Selenium")
        logger.info("   ‚Ä¢ Gesti√≥n de sesiones por aseguradora habilitada")
    
    def connect_rabbitmq(self):
        """Conecta a RabbitMQ"""
        try:
            credentials = pika.PlainCredentials(Config.RABBITMQ_USERNAME, Config.RABBITMQ_PASSWORD)
            self.rabbitmq_connection = pika.BlockingConnection(
                pika.ConnectionParameters(
                    host=Config.RABBITMQ_HOST,
                    port=Config.RABBITMQ_PORT,
                    credentials=credentials
                )
            )
            
            self.rabbitmq_channel = self.rabbitmq_connection.channel()
            
            # Declarar la cola y el exchange
            self.rabbitmq_channel.queue_declare(queue=Config.RABBITMQ_QUEUE, durable=True)
            self.rabbitmq_channel.exchange_declare(
                exchange=Config.RABBITMQ_EXCHANGE, 
                exchange_type='direct', 
                durable=True
            )
            
            # Vincular la cola al exchange
            self.rabbitmq_channel.queue_bind(
                exchange=Config.RABBITMQ_EXCHANGE,
                queue=Config.RABBITMQ_QUEUE,
                routing_key=Config.RABBITMQ_ROUTING_KEY
            )
            
            logger.info("‚úÖ Conectado a RabbitMQ exitosamente")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error conectando a RabbitMQ: {e}")
            return False
    
    def setup_selenium_driver(self):
        """Configura el driver de Selenium para login autom√°tico"""
        try:
            if self.driver:
                return True
                
            logger.info("üîß Configurando driver de Selenium...")
            
            # Opciones de Edge para modo headless
            edge_options = Options()
            # edge_options.add_argument("--headless")  # Ejecutar sin interfaz gr√°fica
            edge_options.add_argument("--no-sandbox")
            edge_options.add_argument("--disable-dev-shm-usage")
            edge_options.add_argument("--disable-gpu")
            edge_options.add_argument("--window-size=1920,1080")
            edge_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0")
            
            # Reducir logs de Edge
            edge_options.add_argument("--log-level=3")  # Solo errores cr√≠ticos
            edge_options.add_argument("--silent")
            edge_options.add_argument("--disable-logging")
            edge_options.add_experimental_option('excludeSwitches', ['enable-logging'])
            
            # Crear driver de Edge
            self.driver = webdriver.Edge(options=edge_options)
            self.driver.set_page_load_timeout(30)
            
            # Configurar logging de Selenium para reducir ruido
            import logging
            selenium_logger = logging.getLogger('selenium')
            selenium_logger.setLevel(logging.WARNING)
            
            # Reducir logs de urllib3 (usado por Selenium)
            urllib3_logger = logging.getLogger('urllib3')
            urllib3_logger.setLevel(logging.WARNING)
            
            logger.info("‚úÖ Driver de Edge configurado correctamente")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error configurando Selenium: {e}")
            return False
    
    def execute_login(self, url_info, datos_mensaje=None):
        """Ejecuta el login autom√°tico en la p√°gina web"""
        try:
            # Para PAN AMERICAN LIFE DE ECUADOR, usar el procesador espec√≠fico
            if url_info.get('nombre') == 'PAN AMERICAN LIFE DE ECUADOR':
                logger.info("üá™üá® Usando procesador espec√≠fico para PAN AMERICAN LIFE DE ECUADOR")
                
                try:
                    from aseguradoras.pan_american_life_ecuador.implementacion_oauth2 import crear_procesador_oauth2
                    procesador = crear_procesador_oauth2(self.db_manager)
                    logger.info("‚úÖ Procesador espec√≠fico PAN AMERICAN LIFE DE ECUADOR cargado para login")
                    
                    # Usar el procesador espec√≠fico para el login
                    return procesador._ejecutar_login_con_reintentos(self.driver)
                    
                except ImportError as e:
                    logger.error(f"‚ùå Error importando procesador espec√≠fico: {e}")
                    logger.info("üîÑ Usando l√≥gica gen√©rica como fallback")
                    # Continuar con la l√≥gica gen√©rica
                except Exception as e:
                    logger.error(f"‚ùå Error ejecutando procesador espec√≠fico: {e}")
                    logger.info("üîÑ Usando l√≥gica gen√©rica como fallback")
                    # Continuar con la l√≥gica gen√©rica
            
            # L√≥gica gen√©rica para otras aseguradoras
            if not self.setup_selenium_driver():
                logger.error("‚ùå No se pudo configurar Selenium")
                return False
            
            url_login = url_info['url_login']
            logger.info(f"üåê Navegando a: {url_login}")
            
            # Navegar a la p√°gina de login
            self.driver.get(url_login)
            
            # Esperar a que la p√°gina cargue
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            logger.info("‚úÖ P√°gina cargada correctamente")
            
            # Ejecutar campos de login
            if url_info.get('campos_login'):
                logger.info("üîê Ejecutando campos de login...")
                
                for campo in url_info['campos_login']:
                    selector = campo['selector_html']
                    valor = campo['valor_dinamico']
                    
                    if not valor:
                        logger.warning(f"‚ö†Ô∏è  Campo {selector} sin valor, saltando...")
                        continue
                    
                    try:
                        # Buscar el elemento con reintento de recarga
                        elemento = self._buscar_elemento_con_reintento(selector, f"Campo {selector}")
                        
                        # Limpiar y escribir valor
                        elemento.clear()
                        elemento.send_keys(valor)
                        
                        logger.info(f"‚úÖ Campo {selector} completado con: {valor}")
                        
                    except TimeoutException:
                        logger.error(f"‚ùå No se encontr√≥ el campo {selector}")
                        return False
                    except Exception as e:
                        logger.error(f"‚ùå Error en campo {selector}: {e}")
                        return False
            
            # Ejecutar acciones post-login
            if url_info.get('acciones_post_login'):
                logger.info("üéØ Ejecutando acciones post-login...")
                
                for accion in url_info['acciones_post_login']:
                    tipo = accion['tipo_accion']
                    selector = accion['selector_html']
                    
                    try:
                        # Buscar el elemento con reintento
                        elemento = self._buscar_boton_con_reintento(selector, f"Acci√≥n {selector}")
                        
                        if tipo.lower() == 'click':
                            elemento.click()
                            logger.info(f"‚úÖ Click ejecutado en: {selector}")
                        elif tipo.lower() == 'submit':
                            elemento.submit()
                            logger.info(f"‚úÖ Submit ejecutado en: {selector}")
                        else:
                            logger.warning(f"‚ö†Ô∏è  Tipo de acci√≥n no reconocido: {tipo}")
                        
                        # Peque√±a pausa para que la acci√≥n se procese
                        time.sleep(2)
                        
                    except TimeoutException:
                        logger.error(f"‚ùå No se pudo ejecutar acci√≥n {tipo} en {selector}")
                        return False
                    except Exception as e:
                        logger.error(f"‚ùå Error ejecutando acci√≥n {tipo}: {e}")
                        return False
            
            # Verificar si el login fue exitoso
            logger.info("üîç Verificando resultado del login...")
            
            # Obtener la URL actual para verificar si cambi√≥
            url_actual = self.driver.current_url
            titulo_pagina = self.driver.title
            
            logger.info(f"‚úÖ Login completado exitosamente!")
            logger.info(f"   üìç URL actual: {url_actual}")
            logger.info(f"   üìÑ T√≠tulo de la p√°gina: {titulo_pagina}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error en login: {e}")
            return False
    
    def capturar_informacion_pantalla(self, id_url, nombre_aseguradora=None, datos_mensaje=None):
        """Captura informaci√≥n de la pantalla post-login y la almacena en la base de datos"""
        try:
            logger.info("üì∏ Iniciando captura de informaci√≥n de la pantalla...")
            
            # L√≥gica espec√≠fica para PAN AMERICAN LIFE DE ECUADOR
            if nombre_aseguradora == 'PAN AMERICAN LIFE DE ECUADOR':
                # Usar el procesador espec√≠fico que ya maneja todo el flujo
                try:
                    from aseguradoras.pan_american_life_ecuador.implementacion_oauth2 import crear_procesador_oauth2
                    procesador = crear_procesador_oauth2(self.db_manager)
                    logger.info("‚úÖ Procesador espec√≠fico PAN AMERICAN LIFE DE ECUADOR cargado para captura")
                    
                    # El procesador ya maneja todo el flujo OAuth2 + captura
                    return procesador.procesar_oauth2_completo(self.driver, datos_mensaje)
                    
                except ImportError as e:
                    logger.error(f"‚ùå Error importando procesador espec√≠fico: {e}")
                    # Fallback a l√≥gica original
                    return self._capturar_informacion_pale_ec(id_url, datos_mensaje)
            
            # L√≥gica gen√©rica para otras aseguradoras
            return self._capturar_informacion_generica(id_url)
            
        except Exception as e:
            logger.error(f"‚ùå Error en captura de informaci√≥n: {e}")
            return False
    
    def _capturar_informacion_pale_ec(self, id_url, datos_mensaje):
        """Captura informaci√≥n espec√≠fica para PAN AMERICAN LIFE DE ECUADOR (fallback)"""
        try:
            logger.info("üì∏ Capturando informaci√≥n espec√≠fica para PAN AMERICAN LIFE DE ECUADOR...")
            
            # L√≥gica espec√≠fica para PAN AMERICAN LIFE DE ECUADOR
            # Esta funci√≥n act√∫a como fallback si el procesador espec√≠fico no est√° disponible
            
            # Construir nombre completo del cliente
            nombre_completo = self._construir_nombre_completo(datos_mensaje)
            if not nombre_completo:
                logger.error("‚ùå No se pudo construir el nombre completo del cliente")
                return False
            
            # Capturar tabla y buscar cliente
            resultado = self._capturar_tabla_resultados_pale_ec(nombre_completo, datos_mensaje)
            if not resultado:
                logger.error("‚ùå No se pudo capturar informaci√≥n de la tabla")
                return False
            
            # Guardar en base de datos
            if not self._guardar_cliente_en_bd(resultado, datos_mensaje):
                logger.error("‚ùå Error guardando en base de datos")
                return False
            
            logger.info("‚úÖ Captura de informaci√≥n completada exitosamente")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error en captura de informaci√≥n: {e}")
            return False
    
    def _construir_nombre_completo(self, datos_mensaje):
        """Construye el nombre completo del cliente concatenando los campos"""
        try:
            logger.info("üî§ Construyendo nombre completo del cliente...")
            
            # Extraer campos del mensaje
            primer_nombre = datos_mensaje.get('PersonaPrimerNombre', '').strip()
            segundo_nombre = datos_mensaje.get('PersonaSegundoNombre', '').strip()
            primer_apellido = datos_mensaje.get('PersonaPrimerApellido', '').strip()
            segundo_apellido = datos_mensaje.get('PersonaSegundoApellido', '').strip()
            
            logger.info(f"   üìù Primer nombre: '{primer_nombre}'")
            logger.info(f"   üìù Segundo nombre: '{segundo_nombre}'")
            logger.info(f"   üìù Primer apellido: '{primer_apellido}'")
            logger.info(f"   üìù Segundo apellido: '{segundo_apellido}'")
            
            # Construir nombre completo
            partes_nombre = []
            
            if primer_nombre:
                partes_nombre.append(primer_nombre)
            if segundo_nombre:
                partes_nombre.append(segundo_nombre)
            if primer_apellido:
                partes_nombre.append(primer_apellido)
            if segundo_apellido:
                partes_nombre.append(segundo_apellido)
            
            if not partes_nombre:
                logger.error("‚ùå No se pudo construir el nombre completo - todos los campos est√°n vac√≠os")
                return None
            
            nombre_completo = ' '.join(partes_nombre)
            logger.info(f"‚úÖ Nombre completo construido: '{nombre_completo}'")
            
            return nombre_completo
            
        except Exception as e:
            logger.error(f"‚ùå Error construyendo nombre completo: {e}")
            return None
    
    def _capturar_tabla_resultados_pale_ec(self, nombre_completo_cliente=None, datos_mensaje=None):
        """Captura la tabla de resultados espec√≠fica para PAN AMERICAN LIFE DE ECUADOR"""
        try:
            logger.info("üîç Capturando tabla de resultados para PAN AMERICAN LIFE DE ECUADOR...")
            
            # Buscar la tabla de resultados
            tabla = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'table.GridViewStylePV'))
            )
            
            logger.info("‚úÖ Tabla encontrada")
            
            # Buscar filas de datos
            filas = tabla.find_elements(By.CSS_SELECTOR, 'tr.RowStylePV')
            logger.info(f"üìä Encontradas {len(filas)} filas de datos")
            
            # Buscar el cliente espec√≠fico
            for i, fila in enumerate(filas):
                try:
                    # Buscar la columna "Nombre del Paciente"
                    celdas = fila.find_elements(By.TAG_NAME, 'td')
                    if len(celdas) >= 4:  # Asegurar que hay suficientes columnas
                        nombre_paciente = celdas[3].text.strip()  # Columna 4 (√≠ndice 3)
                        
                        logger.info(f"   üîç Fila {i+1}: '{nombre_paciente}'")
                        
                        # Verificar si coincide con el nombre completo
                        if nombre_completo_cliente.upper() in nombre_paciente.upper():
                            logger.info(f"‚úÖ Cliente encontrado en fila {i+1}")
                            
                            # Verificar que el status sea "Activo"
                            if len(celdas) >= 8:  # Asegurar que hay columna de status
                                status_celda = celdas[7]  # Columna 8 (√≠ndice 7)
                                status_texto = status_celda.text.strip()
                                
                                if "Activo" in status_texto:
                                    logger.info("‚úÖ Status 'Activo' confirmado")
                                    
                                    # Extraer datos de la fila
                                    poliza = celdas[0].text.strip()  # Columna 1 (√≠ndice 0)
                                    dependiente = celdas[2].text.strip()  # Columna 3 (√≠ndice 2)
                                    
                                    logger.info(f"   üìã P√≥liza: {poliza}")
                                    logger.info(f"   üìã Dependiente: {dependiente}")
                                    
                                    return {
                                        'poliza': poliza,
                                        'dependiente': dependiente,
                                        'nombre_paciente': nombre_paciente,
                                        'status': status_texto
                                    }
                                else:
                                    logger.warning(f"‚ö†Ô∏è Cliente encontrado pero status no es 'Activo': {status_texto}")
                            else:
                                logger.warning("‚ö†Ô∏è No se pudo verificar el status - estructura de tabla inesperada")
                        else:
                            logger.info(f"   ‚ùå No coincide: '{nombre_paciente}' != '{nombre_completo_cliente}'")
                            
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error procesando fila {i+1}: {e}")
                    continue
            
            logger.warning("‚ö†Ô∏è Cliente no encontrado en la tabla")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Error capturando tabla de resultados: {e}")
            return None
    
    def _guardar_cliente_en_bd(self, fila_data, datos_mensaje):
        """Guarda la informaci√≥n del cliente en la base de datos"""
        try:
            logger.info("üíæ Guardando cliente en base de datos...")
            
            # Extraer datos
            num_poliza = fila_data['poliza']
            num_dependiente = fila_data['dependiente']
            
            id_factura = datos_mensaje.get('IdFactura')
            id_aseguradora = datos_mensaje.get('IdAseguradora')
            
            logger.info(f"   üìã IdFactura: {id_factura}")
            logger.info(f"   üìã IdAseguradora: {id_aseguradora}")
            logger.info(f"   üìã NumPoliza: {num_poliza}")
            logger.info(f"   üìã NumDependiente: {num_dependiente}")
            
            # Buscar si ya existe un registro
            query_buscar = """
                SELECT IdfacturaCliente, NumPoliza, NumDependiente 
                FROM [NeptunoMedicalAutomatico].[dbo].[FacturaCliente] 
                WHERE IdFactura = ? AND IdAseguradora = ?
            """
            
            resultado = self.db_manager.execute_query(query_buscar, (id_factura, id_aseguradora))
            
            if resultado:
                # Actualizar registro existente
                logger.info("üîÑ Actualizando registro existente...")
                
                query_update = """
                    UPDATE [NeptunoMedicalAutomatico].[dbo].[FacturaCliente] 
                    SET NumPoliza = ?, NumDependiente = ?
                    WHERE IdFactura = ? AND IdAseguradora = ?
                """
                
                self.db_manager.execute_query(query_update, (num_poliza, num_dependiente, id_factura, id_aseguradora))
                logger.info("‚úÖ Registro actualizado exitosamente")
                
            else:
                # Insertar nuevo registro
                logger.info("‚ûï Insertando nuevo registro...")
                self._insertar_nuevo_cliente(datos_mensaje, num_poliza, num_dependiente)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error guardando cliente en base de datos: {e}")
            return False
    
    def _insertar_nuevo_cliente(self, datos_mensaje, num_poliza, num_dependiente):
        """Inserta un nuevo cliente en la base de datos"""
        try:
            # Generar ID √∫nico
            id_factura_cliente = str(uuid.uuid4())
            
            # Extraer datos del mensaje
            id_factura = datos_mensaje.get('IdFactura')
            id_aseguradora = datos_mensaje.get('IdAseguradora')
            num_doc_identidad = datos_mensaje.get('NumDocIdentidad')
            cliente_primer_nombre = datos_mensaje.get('ClientePersonaPrimerNombre')
            cliente_segundo_nombre = datos_mensaje.get('ClientePersonaSegundoNombre')
            cliente_primer_apellido = datos_mensaje.get('ClientePersonaPrimerApellido')
            cliente_segundo_apellido = datos_mensaje.get('ClientePersonaSegundoApellido')
            
            query_insert = """
                INSERT INTO [NeptunoMedicalAutomatico].[dbo].[FacturaCliente] 
                (IdfacturaCliente, IdFactura, IdAseguradora, NumDocIdentidad, 
                 ClientePersonaPrimerNombre, ClientePersonaSegundoNombre, 
                 ClientePersonaPrimerApellido, ClientePersonaSegundoApellido, 
                 NumPoliza, NumDependiente, estado)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 1)
            """
            
            params = (
                id_factura_cliente, id_factura, id_aseguradora, num_doc_identidad,
                cliente_primer_nombre, cliente_segundo_nombre,
                cliente_primer_apellido, cliente_segundo_apellido,
                num_poliza, num_dependiente
            )
            
            self.db_manager.execute_query(query_insert, params)
            logger.info("‚úÖ Nuevo cliente insertado exitosamente")
            
        except Exception as e:
            logger.error(f"‚ùå Error insertando nuevo cliente: {e}")
            raise
    
    def _buscar_elemento_con_reintento(self, selector, nombre_campo, max_reintentos=2):
        """Busca un elemento con reintento y recarga de p√°gina si es necesario"""
        try:
            for intento in range(1, max_reintentos + 1):
                try:
                    logger.info(f"üîç Buscando elemento '{nombre_campo}' (intento {intento}/{max_reintentos})...")
                    logger.info(f"   üìç Selector: {selector}")
                    
                    elemento = WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                    )
                    
                    logger.info(f"‚úÖ Elemento '{nombre_campo}' encontrado en intento {intento}")
                    return elemento
                    
                except TimeoutException:
                    if intento < max_reintentos:
                        logger.warning(f"‚ö†Ô∏è Elemento '{nombre_campo}' no encontrado en intento {intento}, recargando p√°gina...")
                        self.driver.refresh()
                        time.sleep(5)
                    else:
                        logger.error(f"‚ùå Elemento '{nombre_campo}' no encontrado despu√©s de {intento} intentos")
                        raise
                        
        except Exception as e:
            logger.error(f"‚ùå Error buscando elemento '{nombre_campo}': {e}")
            raise
    
    def _buscar_boton_con_reintento(self, selector, nombre_campo, max_reintentos=2):
        """Busca un bot√≥n con reintento y recarga de p√°gina si es necesario"""
        try:
            for intento in range(1, max_reintentos + 1):
                try:
                    logger.info(f"üîç Buscando bot√≥n para '{nombre_campo}' (intento {intento}/{max_reintentos})...")
                    logger.info(f"   üìç Selector: {selector}")
                    
                    elemento = WebDriverWait(self.driver, 10).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                    )
                    
                    logger.info(f"‚úÖ Bot√≥n para '{nombre_campo}' encontrado en intento {intento}")
                    return elemento
                    
                except TimeoutException:
                    if intento < max_reintentos:
                        logger.warning(f"‚ö†Ô∏è Bot√≥n '{nombre_campo}' no encontrado en intento {intento}, recargando p√°gina...")
                        self.driver.refresh()
                        time.sleep(5)
                    else:
                        logger.error(f"‚ùå Bot√≥n '{nombre_campo}' no encontrado despu√©s de {intento} intentos")
                        raise
                        
        except Exception as e:
            logger.error(f"‚ùå Error buscando bot√≥n '{nombre_campo}': {e}")
            raise
    
    def _capturar_informacion_generica(self, id_url):
        """Captura informaci√≥n gen√©rica para otras aseguradoras"""
        try:
            logger.info("üì∏ Capturando informaci√≥n gen√©rica...")
            
            # L√≥gica gen√©rica para otras aseguradoras
            # Esta funci√≥n puede ser implementada seg√∫n las necesidades espec√≠ficas
            
            logger.info("‚úÖ Captura de informaci√≥n gen√©rica completada")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error en captura de informaci√≥n gen√©rica: {e}")
            return False
    
    def _recrear_sesion_navegador(self):
        """Recrea la sesi√≥n del navegador cuando se detecta desconexi√≥n"""
        try:
            logger.warning("üîÑ Detectada desconexi√≥n del navegador - Recreando sesi√≥n...")
            
            # Cerrar el driver actual si existe
            if hasattr(self, 'driver') and self.driver:
                try:
                    self.driver.quit()
                    logger.info("‚úÖ Driver anterior cerrado")
                except:
                    pass
                
            # Crear nuevo driver
            logger.info("üîß Creando nuevo driver de Edge...")
            edge_options = Options()
            edge_options.add_argument("--no-sandbox")
            edge_options.add_argument("--disable-dev-shm-usage")
            edge_options.add_argument("--window-size=1920,1080")
            edge_options.add_argument("--disable-blink-features=AutomationControlled")
            edge_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            edge_options.add_experimental_option('useAutomationExtension', False)
            
            self.driver = webdriver.Edge(options=edge_options)
            self.driver.set_page_load_timeout(30)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            logger.info("‚úÖ Nueva sesi√≥n del navegador creada exitosamente")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error recreando sesi√≥n del navegador: {e}")
            return False

def main():
    """Funci√≥n principal del worker"""
    try:
        logger.info("üöÄ Iniciando worker de producci√≥n...")
        
        # Crear instancia del worker
        worker = ScrapingWorker()
        
        # Iniciar el worker
        worker.start()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Deteniendo worker por interrupci√≥n del usuario...")
    except Exception as e:
        logger.error(f"‚ùå Error en funci√≥n principal: {e}")
    finally:
        logger.info("üîå Worker detenido correctamente")
        sys.exit(0)

if __name__ == "__main__":
    main()
                                    lambda driver: driver.execute_script("return document.readyState") == "complete"
                                )
                                logger.info("‚úÖ P√°gina completamente cargada despu√©s de la b√∫squeda")
                                logger.info(f"   üìç URL final despu√©s de b√∫squeda: {self.driver.current_url}")
                            except:
                                logger.info("‚ÑπÔ∏è P√°gina cargada (timeout de readyState)")
                                logger.info(f"   üìç URL actual (timeout): {self.driver.current_url}")
                            
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è No se pudo hacer clic en el bot√≥n: {e}")
                            logger.info("üîÑ Intentando con selectores alternativos...")
                            
                            # Intentar con selectores alternativos
                            selectores_alternativos = [
                                'button[type="submit"]',
                                'input[type="submit"]',
                                '.btn-primary',
                                '.btn-buscar',
                                'button:contains("Buscar")',
                                'button:contains("Consultar")'
                            ]
                            
                            for selector_alt in selectores_alternativos:
                                try:
                                    boton_alt = WebDriverWait(self.driver, 5).until(
                                        EC.element_to_be_clickable((By.CSS_SELECTOR, selector_alt))
                                    )
                                    boton_alt.click()
                                    logger.info(f"‚úÖ Bot√≥n alternativo clickeado: {selector_alt}")
                                    time.sleep(5)  # Aumentar tiempo de espera
                                    break
                                except:
                                    continue
                        
                        # Capturar la tabla de resultados
                        logger.info("üìä Iniciando captura de tabla de resultados...")
                        return self._capturar_tabla_resultados_pale_ec(nombre_completo, datos_mensaje)
                        
                    else:
                        logger.info(f"‚ÑπÔ∏è Campo {nombre_campo} no es de tipo input, saltando...")
                        
                except TimeoutException:
                    if obligatorio:
                        logger.error(f"‚ùå Campo obligatorio {nombre_campo} no encontrado: {selector_css}")
                        logger.info(f"üîç Elementos disponibles en la p√°gina:")
                        try:
                            elementos_input = self.driver.find_elements(By.CSS_SELECTOR, 'input')
                            logger.info(f"   üìù Inputs encontrados: {len(elementos_input)}")
                            for i, elem in enumerate(elementos_input[:5]):  # Mostrar solo los primeros 5
                                logger.info(f"      {i+1}. id='{elem.get_attribute('id')}', name='{elem.get_attribute('name')}', placeholder='{elem.get_attribute('placeholder')}'")
                        except:
                            pass
                        return False
                    else:
                        logger.warning(f"‚ö†Ô∏è Campo opcional {nombre_campo} no encontrado: {selector_css}")
                except Exception as e:
                    logger.error(f"‚ùå Error procesando campo {nombre_campo}: {e}")
                    if obligatorio:
                        return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error en captura espec√≠fica PALE_EC: {e}")
            return False
    
    def _construir_nombre_completo(self, datos_mensaje):
        """Construye el nombre completo del cliente concatenando las columnas del mensaje RabbitMQ"""
        try:
            # Obtener las columnas de nombre del mensaje RabbitMQ
            primer_nombre = datos_mensaje.get('PersonaPrimerNombre', '').strip()
            segundo_nombre = datos_mensaje.get('PersonaSegundoNombre', '').strip()
            primer_apellido = datos_mensaje.get('PersonaPrimerApellido', '').strip()
            segundo_apellido = datos_mensaje.get('PersonaSegundoApellido', '').strip()
            
            # Construir nombre completo con espacios entre columnas
            nombre_completo = f"{primer_nombre} {segundo_nombre} {primer_apellido} {segundo_apellido}".strip()
            
            if nombre_completo:
                logger.info(f"üîç Construyendo nombre completo desde RabbitMQ:")
                logger.info(f"   ‚Ä¢ PersonaPrimerNombre: '{primer_nombre}'")
                logger.info(f"   ‚Ä¢ PersonaSegundoNombre: '{segundo_nombre}'")
                logger.info(f"   ‚Ä¢ PersonaPrimerApellido: '{primer_apellido}'")
                logger.info(f"   ‚Ä¢ PersonaSegundoApellido: '{segundo_apellido}'")
                logger.info(f"   ‚Ä¢ Nombre Completo: '{nombre_completo}'")
                return nombre_completo
            else:
                logger.warning("‚ö†Ô∏è No se encontraron datos de nombre en el mensaje RabbitMQ")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Error construyendo nombre completo: {e}")
            return None
    
    def _capturar_tabla_resultados_pale_ec(self, nombre_completo_cliente=None, datos_mensaje=None):
        """Captura la tabla de resultados con clase GridViewStylePV y busca el cliente espec√≠fico"""
        try:
            logger.info("üìä Capturando tabla de resultados...")
            logger.info("=" * 60)
            logger.info(f"üìç URL actual durante captura de tabla: {self.driver.current_url}")
            
            if nombre_completo_cliente:
                logger.info(f"üîç Buscando cliente espec√≠fico: '{nombre_completo_cliente}'")
            
            # Buscar la tabla con clase GridViewStylePV
            logger.info("üîç Buscando tabla con clase 'GridViewStylePV'...")
            tabla = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'table.GridViewStylePV'))
            )
            
            logger.info("‚úÖ Tabla GridViewStylePV encontrada")
            logger.info(f"   üìç Ubicaci√≥n de la tabla en la p√°gina")
            
            # Obtener todas las filas de la tabla
            filas = tabla.find_elements(By.CSS_SELECTOR, 'tr')
            logger.info(f"üìã Total de filas encontradas: {len(filas)}")
            
            if len(filas) <= 1:  # Solo header o tabla vac√≠a
                logger.info("‚ÑπÔ∏è Tabla sin resultados o solo con encabezados")
                logger.info(f"   üìç URL confirmada: {self.driver.current_url}")
                return True
            
            # Obtener encabezados (primera fila)
            encabezados = []
            if filas:
                celdas_header = filas[0].find_elements(By.CSS_SELECTOR, 'th, td')
                encabezados = [celda.text.strip() for celda in celdas_header if celda.text.strip()]
                logger.info(f"üìù Encabezados de la tabla ({len(encabezados)} columnas):")
                for i, encabezado in enumerate(encabezados, 1):
                    logger.info(f"   {i}. {encabezado}")
            
            logger.info("=" * 60)
            
            # Procesar filas de datos (excluyendo la primera si es header)
            cliente_encontrado = None
            logger.info("üìÑ Procesando filas de datos para buscar cliente espec√≠fico...")
            
            for i, fila in enumerate(filas[1:], 1):
                celdas = fila.find_elements(By.CSS_SELECTOR, 'td')
                if celdas:
                    fila_data = {}
                    
                    # Construir datos de la fila
                    for j, celda in enumerate(celdas):
                        if j < len(encabezados):
                            encabezado = encabezados[j]
                            valor = celda.text.strip()
                            fila_data[encabezado] = valor
                    
                    if fila_data:
                        # üîç BUSCAR CLIENTE ESPEC√çFICO SI SE PROPORCIONA NOMBRE
                        if nombre_completo_cliente and self._es_cliente_buscado(fila_data, nombre_completo_cliente):
                            if self._validar_cliente_activo(fila_data):
                                cliente_encontrado = fila_data
                                logger.info(f"üéØ ¬°CLIENTE ENCONTRADO Y VALIDADO en fila {i}!")
                                logger.info(f"   ‚úÖ Nombre: '{fila_data.get('Nombre del Paciente', 'N/A')}'")
                                logger.info(f"   ‚úÖ Status: '{fila_data.get('Status', 'N/A')}'")
                                logger.info(f"   üìã Datos del cliente:")
                                logger.info(f"      ‚Ä¢ P√≥liza: {fila_data.get('P√≥liza', 'N/A')}")
                                logger.info(f"      ‚Ä¢ Certificado: {fila_data.get('Certificado', 'N/A')}")
                                logger.info(f"      ‚Ä¢ No. Dependiente: {fila_data.get('No. Dependiente', 'N/A')}")
                                logger.info(f"      ‚Ä¢ Relaci√≥n: {fila_data.get('Relacion', 'N/A')}")
                                logger.info(f"      ‚Ä¢ Tipo de P√≥liza: {fila_data.get('Tipo de P√≥liza', 'N/A')}")
                                
                                # üöÄ GUARDAR INFORMACI√ìN EN BASE DE DATOS INMEDIATAMENTE
                                if datos_mensaje:
                                    logger.info("üíæ Guardando informaci√≥n del cliente en base de datos...")
                                    if self._guardar_cliente_en_bd(fila_data, datos_mensaje):
                                        logger.info("‚úÖ Cliente guardado exitosamente en base de datos")
                    else:
                                        logger.error("‚ùå Error guardando cliente en base de datos")
                else:
                                    logger.warning("‚ö†Ô∏è No hay datos del mensaje para guardar en BD")
                                
                                # Una vez encontrado el cliente, no necesitamos seguir procesando
                                logger.info("‚úÖ Cliente encontrado - deteniendo b√∫squeda")
                                break
                            else:
                                logger.warning(f"‚ö†Ô∏è Cliente encontrado pero NO est√° activo en fila {i}")
                                logger.warning(f"   ‚ùå Status: '{fila_data.get('Status', 'N/A')}'")
                                # Continuar buscando en caso de que haya otro cliente con el mismo nombre
                        else:
                            # Solo mostrar informaci√≥n si no estamos buscando un cliente espec√≠fico
                            if not nombre_completo_cliente:
                                logger.info(f"üìÑ Fila {i}: {fila_data.get('Nombre del Paciente', 'N/A')}")
                    
                    # Si encontramos el cliente, salir del bucle
                    if cliente_encontrado:
                        break
            
            logger.info("=" * 60)
            logger.info(f"üéØ RESUMEN DE CAPTURA:")
            logger.info(f"   üìù Columnas capturadas: {len(encabezados)}")
            logger.info(f"   üìã Encabezados: {', '.join(encabezados)}")
            
            if cliente_encontrado:
                logger.info("üéØ CLIENTE ENCONTRADO Y VALIDADO:")
                logger.info(f"   üë§ Nombre: {cliente_encontrado.get('Nombre del Paciente', 'N/A')}")
                logger.info(f"   üìã Informaci√≥n de P√≥liza:")
                logger.info(f"      ‚Ä¢ P√≥liza: {cliente_encontrado.get('P√≥liza', 'N/A')}")
                logger.info(f"      ‚Ä¢ Certificado: {cliente_encontrado.get('Certificado', 'N/A')}")
                logger.info(f"      ‚Ä¢ No. Dependiente: {cliente_encontrado.get('No. Dependiente', 'N/A')}")
                logger.info(f"      ‚Ä¢ Relaci√≥n: {cliente_encontrado.get('Relacion', 'N/A')}")
                logger.info(f"      ‚Ä¢ Tipo de P√≥liza: {cliente_encontrado.get('Tipo de P√≥liza', 'N/A')}")
                logger.info(f"      ‚Ä¢ Status: {cliente_encontrado.get('Status', 'N/A')}")
            else:
                if nombre_completo_cliente:
                    logger.warning(f"‚ö†Ô∏è NO SE ENCONTR√ì el cliente '{nombre_completo_cliente}' o no est√° activo")
                else:
                    logger.info("‚ÑπÔ∏è No se busc√≥ cliente espec√≠fico")
            
            logger.info("=" * 60)
            logger.info("‚úÖ Captura de tabla completada exitosamente")
            return True
            
        except TimeoutException:
            logger.warning("‚ö†Ô∏è No se encontr√≥ tabla de resultados con clase 'GridViewStylePV'")
            logger.info("üîç Buscando otras tablas en la p√°gina...")
            
            try:
                # Buscar otras tablas
                tablas = self.driver.find_elements(By.CSS_SELECTOR, 'table')
                logger.info(f"üìã Tablas encontradas en la p√°gina: {len(tablas)}")
                
                for i, tabla in enumerate(tablas):
                    try:
                        clase = tabla.get_attribute('class') or 'sin-clase'
                        filas = tabla.find_elements(By.CSS_SELECTOR, 'tr')
                        logger.info(f"   Tabla {i+1}: clase='{clase}', filas={len(filas)}")
                    except:
                        pass
                
                return True
            except:
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Error capturando tabla: {e}")
            return False
    
    def _es_cliente_buscado(self, fila_data, nombre_completo_cliente):
        """Verifica si la fila corresponde al cliente buscado"""
        try:
            nombre_paciente = fila_data.get('Nombre del Paciente', '').strip()
            if not nombre_paciente:
                return False
            
            # Comparar nombres (ignorar may√∫sculas/min√∫sculas y espacios extra)
            nombre_paciente_normalizado = ' '.join(nombre_paciente.split()).upper()
            nombre_buscado_normalizado = ' '.join(nombre_completo_cliente.split()).upper()
            
            es_cliente = nombre_paciente_normalizado == nombre_buscado_normalizado
            
            if es_cliente:
                logger.info(f"üéØ ¬°COINCIDENCIA DE NOMBRE ENCONTRADA!")
                logger.info(f"   üîç Buscado: '{nombre_completo_cliente}'")
                logger.info(f"   ‚úÖ Encontrado: '{nombre_paciente}'")
            else:
                logger.info(f"‚ÑπÔ∏è No es el cliente buscado:")
                logger.info(f"   üîç Buscado: '{nombre_completo_cliente}'")
                logger.info(f"   ‚ùå Encontrado: '{nombre_paciente}'")
            
            return es_cliente
            
        except Exception as e:
            logger.error(f"‚ùå Error verificando si es cliente buscado: {e}")
            return False
    
    def _validar_cliente_activo(self, fila_data):
        """Verifica si el cliente est√° activo seg√∫n el status"""
        try:
            status = fila_data.get('Status', '').strip()
            if not status:
                logger.warning("‚ö†Ô∏è No se encontr√≥ informaci√≥n de Status")
                return False
            
            # Verificar si est√° activo (ignorar may√∫sculas/min√∫sculas)
            es_activo = 'activo' in status.lower()
            
            if es_activo:
                logger.info(f"‚úÖ Cliente est√° ACTIVO - Status: '{status}'")
            else:
                logger.warning(f"‚ö†Ô∏è Cliente NO est√° activo - Status: '{status}'")
            
            return es_activo
            
        except Exception as e:
            logger.error(f"‚ùå Error validando status del cliente: {e}")
            return False
    
    def _guardar_cliente_en_bd(self, fila_data, datos_mensaje):
        """Actualiza o inserta la informaci√≥n del cliente en la base de datos NeptunoMedicalAutomatico"""
        try:
            import uuid
            from datetime import datetime
            
            logger.info("üíæ Iniciando proceso de actualizaci√≥n/inserci√≥n en base de datos...")
            logger.info("=" * 60)
            
            # Obtener IdFactura e IdAseguradora del mensaje (si est√°n disponibles)
            id_factura = datos_mensaje.get('IdFactura')
            id_aseguradora = datos_mensaje.get('IdAseguradora')
            
            logger.info(f"üîç Buscando coincidencias con:")
            logger.info(f"   ‚Ä¢ IdFactura: {id_factura}")
            logger.info(f"   ‚Ä¢ IdAseguradora: {id_aseguradora}")
            
            # Si tenemos IdFactura e IdAseguradora, intentar UPDATE primero
            if id_factura and id_aseguradora:
                logger.info("üîÑ Intentando UPDATE - Buscando registro existente...")
                
                # Query para buscar registro existente
                select_query = """
                    SELECT [IdfacturaCliente], [NumPoliza], [NumDependiente]
                    FROM [NeptunoMedicalAutomatico].[dbo].[FacturaCliente]
                    WHERE [IdFactura] = :IdFactura 
                    AND [IdAseguradora] = :IdAseguradora
                    AND [estado] = 1
                """
                
                # Buscar registro existente
                registro_existente = self.db_manager.execute_query(
                    select_query, 
                    {'IdFactura': id_factura, 'IdAseguradora': id_aseguradora}
                )
                
                if registro_existente and len(registro_existente) > 0:
                    # ‚úÖ REGISTRO ENCONTRADO - HACER UPDATE
                    registro = registro_existente[0]
                    id_factura_cliente = registro['IdfacturaCliente']
                    
                    logger.info(f"‚úÖ Registro encontrado - ID: {id_factura_cliente}")
                    logger.info(f"   üìã P√≥liza actual: {registro.get('NumPoliza', 'N/A')}")
                    logger.info(f"   üìã Dependiente actual: {registro.get('NumDependiente', 'N/A')}")
                    
                    # Preparar datos para UPDATE
                    datos_update = {
                        'IdfacturaCliente': id_factura_cliente,
                        'NumPoliza': fila_data.get('P√≥liza', ''),
                        'NumDependiente': fila_data.get('No. Dependiente', '')
                    }
                    
                    # Query de UPDATE
                    update_query = """
                        UPDATE [NeptunoMedicalAutomatico].[dbo].[FacturaCliente]
                        SET [NumPoliza] = :NumPoliza,
                            [NumDependiente] = :NumDependiente
                        WHERE [IdfacturaCliente] = :IdfacturaCliente
                    """
                    
                    # Ejecutar UPDATE
                    logger.info("üîÑ Ejecutando UPDATE...")
                    logger.info(f"   üìã Nueva P√≥liza: {datos_update['NumPoliza']}")
                    logger.info(f"   üìã Nuevo Dependiente: {datos_update['NumDependiente']}")
                    
                    resultado_update = self.db_manager.execute_query(update_query, datos_update)
                    
                    if resultado_update:
                        logger.info("‚úÖ UPDATE ejecutado exitosamente")
                        logger.info(f"   üÜî ID actualizado: {id_factura_cliente}")
                        logger.info(f"   üìã P√≥liza actualizada: {datos_update['NumPoliza']}")
                        logger.info(f"   üìã Dependiente actualizado: {datos_update['NumDependiente']}")
                        return True
                    else:
                        logger.error("‚ùå Error en UPDATE - resultado vac√≠o")
                        return False
                        
                else:
                    # ‚ö†Ô∏è NO SE ENCONTR√ì REGISTRO - HACER INSERT
                    logger.info("‚ö†Ô∏è No se encontr√≥ registro existente - Procediendo con INSERT...")
                    return self._insertar_nuevo_cliente(fila_data, datos_mensaje)
                    
            else:
                # ‚ö†Ô∏è NO HAY IdFactura o IdAseguradora - HACER INSERT
                logger.info("‚ö†Ô∏è No se proporcionaron IdFactura o IdAseguradora - Procediendo con INSERT...")
                return self._insertar_nuevo_cliente(fila_data, datos_mensaje)
                
        except Exception as e:
            logger.error(f"‚ùå Error en proceso de actualizaci√≥n/inserci√≥n: {e}")
            logger.error(f"   üìç Error tipo: {type(e).__name__}")
            return False
    
    def _buscar_elemento_con_reintento(self, selector, nombre_campo, max_reintentos=2):
        """Busca un elemento con reintento de recarga de p√°gina si no se encuentra"""
        for intento in range(1, max_reintentos + 1):
            try:
                logger.info(f"üîç Buscando elemento '{nombre_campo}' (intento {intento}/{max_reintentos})...")
                logger.info(f"   üìç Selector: {selector}")
                
                # Intentar encontrar el elemento
                elemento = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                )
                
                logger.info(f"‚úÖ Elemento '{nombre_campo}' encontrado en intento {intento}")
                return elemento
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Elemento '{nombre_campo}' no encontrado en intento {intento}")
                logger.warning(f"   üìç Error: {e}")
                
                if intento < max_reintentos:
                    logger.info(f"üîÑ Recargando p√°gina para intento {intento + 1}...")
                    logger.info(f"   üìç URL actual: {self.driver.current_url}")
                    
                    # Recargar la p√°gina
                    self.driver.refresh()
                    time.sleep(3)  # Esperar a que se recargue
                    
                    logger.info(f"‚úÖ P√°gina recargada - URL: {self.driver.current_url}")
                else:
                    logger.error(f"‚ùå Elemento '{nombre_campo}' no encontrado despu√©s de {max_reintentos} intentos")
                    raise e
        
        return None
    
    def _buscar_boton_con_reintento(self, selector, nombre_campo, max_reintentos=2):
        """Busca un bot√≥n con reintento de recarga de p√°gina si no se encuentra"""
        for intento in range(1, max_reintentos + 1):
            try:
                logger.info(f"üîç Buscando bot√≥n para '{nombre_campo}' (intento {intento}/{max_reintentos})...")
                logger.info(f"   üìç Selector: {selector}")
                
                # Intentar encontrar el bot√≥n
                boton = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                )
                
                logger.info(f"‚úÖ Bot√≥n para '{nombre_campo}' encontrado en intento {intento}")
                return boton
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Bot√≥n para '{nombre_campo}' no encontrado en intento {intento}")
                logger.warning(f"   üìç Error: {e}")
                
                if intento < max_reintentos:
                    logger.info(f"üîÑ Recargando p√°gina para intento {intento + 1}...")
                    logger.info(f"   üìç URL actual: {self.driver.current_url}")
                    
                    # Recargar la p√°gina
                    self.driver.refresh()
                    time.sleep(3)  # Esperar a que se recargue
                    
                    logger.info(f"‚úÖ P√°gina recargada - URL: {self.driver.current_url}")
                else:
                    logger.error(f"‚ùå Bot√≥n para '{nombre_campo}' no encontrado despu√©s de {max_reintentos} intentos")
                    raise e
        
        return None
    
    def _recrear_sesion_navegador(self):
        """Recrea la sesi√≥n del navegador cuando se detecta desconexi√≥n"""
        try:
            logger.warning("üîÑ Detectada desconexi√≥n del navegador - Recreando sesi√≥n...")
            
            # Cerrar el driver actual si existe
            if hasattr(self, 'driver') and self.driver:
                try:
                    self.driver.quit()
                    logger.info("‚úÖ Driver anterior cerrado")
                except:
                    pass
            
            # Crear nuevo driver
            logger.info("üîß Creando nuevo driver de Edge...")
            edge_options = Options()
            edge_options.add_argument("--no-sandbox")
            edge_options.add_argument("--disable-dev-shm-usage")
            edge_options.add_argument("--window-size=1920,1080")
            edge_options.add_argument("--disable-blink-features=AutomationControlled")
            edge_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            edge_options.add_experimental_option('useAutomationExtension', False)
            
            self.driver = webdriver.Edge(options=edge_options)
            self.driver.set_page_load_timeout(30)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            logger.info("‚úÖ Nueva sesi√≥n del navegador creada exitosamente")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error recreando sesi√≥n del navegador: {e}")
            return False
    
    def _insertar_nuevo_cliente(self, fila_data, datos_mensaje):
        """Inserta un nuevo cliente en la base de datos"""
        try:
            import uuid
            
            logger.info("‚ûï INSERTANDO NUEVO CLIENTE...")
            logger.info("=" * 60)
            
            # Generar ID √∫nico para el cliente
            id_factura_cliente = str(uuid.uuid4())
            logger.info(f"üÜî ID generado: {id_factura_cliente}")
            
            # Preparar datos para inserci√≥n
            datos_insercion = {
                'IdfacturaCliente': id_factura_cliente,
                'IdFactura': datos_mensaje.get('IdFactura'),
                'IdAseguradora': datos_mensaje.get('IdAseguradora'),
                'NumDocIdentidad': datos_mensaje.get('NumDocIdentidad', ''),
                'ClientePersonaPrimerNombre': datos_mensaje.get('PersonaPrimerNombre', ''),
                'ClientePersonaSegundoNombre': datos_mensaje.get('PersonaSegundoNombre', ''),
                'ClientePersonaPrimerApellido': datos_mensaje.get('PersonaPrimerApellido', ''),
                'ClientePersonaSegundoApellido': datos_mensaje.get('PersonaSegundoApellido', ''),
                'NumPoliza': fila_data.get('P√≥liza', ''),
                'NumDependiente': fila_data.get('No. Dependiente', ''),
                'estado': 1  # 1 = Activo
            }
            
            # Mostrar datos que se van a insertar
            logger.info("üìã Datos a insertar en FacturaCliente:")
            for campo, valor in datos_insercion.items():
                logger.info(f"   ‚Ä¢ {campo}: '{valor}'")
            
            # Query de inserci√≥n
            insert_query = """
                INSERT INTO [NeptunoMedicalAutomatico].[dbo].[FacturaCliente] (
                    [IdfacturaCliente], [IdFactura], [IdAseguradora], [NumDocIdentidad],
                    [ClientePersonaPrimerNombre], [ClientePersonaSegundoNombre],
                    [ClientePersonaPrimerApellido], [ClientePersonaSegundoApellido],
                    [NumPoliza], [NumDependiente], [estado]
                ) VALUES (
                    :IdfacturaCliente, :IdFactura, :IdAseguradora, :NumDocIdentidad,
                    :ClientePersonaPrimerNombre, :ClientePersonaSegundoNombre,
                    :ClientePersonaPrimerApellido, :ClientePersonaSegundoApellido,
                    :NumPoliza, :NumDependiente, :estado
                )
            """
            
            # Ejecutar inserci√≥n
            logger.info("üöÄ Ejecutando INSERT...")
            resultado = self.db_manager.execute_query(insert_query, datos_insercion)
            
            if resultado:
                logger.info("‚úÖ Cliente insertado exitosamente en base de datos")
                logger.info(f"   üÜî ID: {id_factura_cliente}")
                logger.info(f"   üìã P√≥liza: {datos_insercion['NumPoliza']}")
                logger.info(f"   üìã Dependiente: {datos_insercion['NumDependiente']}")
                logger.info(f"   üë§ Cliente: {datos_insercion['ClientePersonaPrimerNombre']} {datos_insercion['ClientePersonaPrimerApellido']}")
                return True
            else:
                logger.error("‚ùå Error en la inserci√≥n - resultado vac√≠o")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error insertando nuevo cliente: {e}")
            logger.error(f"   üìç Error tipo: {type(e).__name__}")
            return False
            
        except TimeoutException:
            logger.warning("‚ö†Ô∏è No se encontr√≥ tabla de resultados con clase 'GridViewStylePV'")
            logger.info("üîç Buscando otras tablas en la p√°gina...")
            
            try:
                # Buscar otras tablas
                tablas = self.driver.find_elements(By.CSS_SELECTOR, 'table')
                logger.info(f"üìã Tablas encontradas en la p√°gina: {len(tablas)}")
                
                for i, tabla in enumerate(tablas):
                    try:
                        clase = tabla.get_attribute('class') or 'sin-clase'
                        filas = tabla.find_elements(By.CSS_SELECTOR, 'tr')
                        logger.info(f"   Tabla {i+1}: clase='{clase}', filas={len(filas)}")
                    except:
                        pass
                
                return True
            except:
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Error capturando tabla: {e}")
            return False
    
    def _capturar_informacion_generica(self, id_url):
        """Captura informaci√≥n gen√©rica para otras aseguradoras"""
        try:
            logger.info("üì∏ Captura gen√©rica de informaci√≥n...")
            
            # Obtener configuraci√≥n de campos a capturar desde la base de datos
            campos_query = """
                SELECT NombreCampo, TipoCampo, SelectorCSS, Orden, Obligatorio
                FROM informacion_capturada 
                WHERE IdUrl = :id_url AND Activo = 1
                ORDER BY Orden
            """
            
            campos_captura = self.db_manager.execute_query(campos_query, {'id_url': id_url})
            
            if not campos_captura:
                logger.info("‚ÑπÔ∏è No hay campos configurados para capturar")
                return True
            
            logger.info(f"üéØ Campos a capturar: {len(campos_captura)}")
            
            # Capturar informaci√≥n de cada campo
            for campo in campos_captura:
                nombre_campo = campo['NombreCampo']
                tipo_campo = campo['TipoCampo']
                selector_css = campo['SelectorCSS']
                orden = campo['Orden']
                obligatorio = campo['Obligatorio']
                
                try:
                    logger.info(f"üîç Capturando campo: {nombre_campo} ({tipo_campo})")
                    
                    # Buscar el elemento en la p√°gina
                    elemento = WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, selector_css))
                    )
                    
                    # Obtener el valor seg√∫n el tipo de campo
                    if tipo_campo.lower() == 'input':
                        valor_capturado = elemento.get_attribute('value') or elemento.get_attribute('placeholder') or ''
                    elif tipo_campo.lower() == 'text':
                        valor_capturado = elemento.text or ''
                    elif tipo_campo.lower() == 'select':
                        # Para select, obtener la opci√≥n seleccionada
                        from selenium.webdriver.support.ui import Select
                        select_element = Select(elemento)
                        valor_capturado = select_element.first_selected_option.text if select_element.first_selected_option else ''
                    else:
                        valor_capturado = elemento.text or elemento.get_attribute('value') or ''
                    
                    # Limpiar el valor capturado
                    if valor_capturado:
                        valor_capturado = valor_capturado.strip()
                    
                    logger.info(f"‚úÖ Campo {nombre_campo} capturado: {valor_capturado[:50]}...")
                    
                except TimeoutException:
                    if obligatorio:
                        logger.error(f"‚ùå Campo obligatorio {nombre_campo} no encontrado: {selector_css}")
                        return False
                    else:
                        logger.warning(f"‚ö†Ô∏è Campo opcional {nombre_campo} no encontrado: {selector_css}")
                except Exception as e:
                    logger.error(f"‚ùå Error capturando campo {nombre_campo}: {e}")
                    if obligatorio:
                        return False
            
            logger.info("‚úÖ Captura de informaci√≥n gen√©rica completada")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error en captura gen√©rica: {e}")
            return False
    
    def get_url_by_aseguradora_name(self, nombre_aseguradora):
        """Busca la URL y campos de login de una aseguradora por su nombre en la base de datos o cach√©"""
        try:
            # Primero verificar si ya est√° en cach√©
            if nombre_aseguradora in self.url_cache:
                logger.info(f"üìã Informaci√≥n encontrada en cach√© para: {nombre_aseguradora}")
                return self.url_cache[nombre_aseguradora]
            
            # Si no est√° en cach√©, buscar en la base de datos
            logger.info(f"üîç Buscando informaci√≥n en base de datos para: {nombre_aseguradora}")
            
            # 1. Obtener informaci√≥n b√°sica de la URL
            url_query = """
                SELECT id, nombre, url_login, url_destino, descripcion, fecha_creacion
                FROM urls_automatizacion 
                WHERE nombre = :nombre
            """
            
            url_results = self.db_manager.execute_query(url_query, {'nombre': nombre_aseguradora})
            
            if url_results and len(url_results) > 0:
                url_row = url_results[0]
                url_id = str(url_row['id'])
                
                # 2. Obtener campos de login (usuario/contrase√±a)
                campos_query = """
                    SELECT selector_html, valor_dinamico
                    FROM campos_login 
                    WHERE id_url = :id_url
                    ORDER BY selector_html
                """
                
                campos_results = self.db_manager.execute_query(campos_query, {'id_url': url_id})
                
                # 3. Obtener acciones post-login
                acciones_query = """
                    SELECT tipo_accion, selector_html, valor_dinamico
                    FROM acciones_post_login 
                    WHERE id_url = :id_url
                    ORDER BY tipo_accion
                """
                
                acciones_results = self.db_manager.execute_query(acciones_query, {'id_url': url_id})
                
                # Construir informaci√≥n completa
                url_info = {
                    'id': url_id,
                    'nombre': url_row['nombre'],
                    'url_login': url_row['url_login'],
                    'url_destino': url_row['url_destino'],
                    'descripcion': url_row['descripcion'],
                    'fecha_creacion': url_row['fecha_creacion'].isoformat() if url_row['fecha_creacion'] else None,
                    'campos_login': campos_results,
                    'acciones_post_login': acciones_results
                }
                
                # Guardar en cach√© para futuras consultas
                self.url_cache[nombre_aseguradora] = url_info
                logger.info(f"üíæ Informaci√≥n completa guardada en cach√© para: {nombre_aseguradora}")
                logger.info(f"   üìù Campos de login: {len(campos_results)}")
                logger.info(f"   üéØ Acciones post-login: {len(acciones_results)}")
                
                return url_info
            else:
                logger.warning(f"‚ö†Ô∏è  No se encontr√≥ URL para {nombre_aseguradora}")
                return None
                    
        except Exception as e:
            logger.error(f"‚ùå Error buscando informaci√≥n para {nombre_aseguradora}: {e}")
            return None
    
    def process_aseguradora_message(self, message_data):
        """Procesa un mensaje de aseguradora"""
        try:
            nombre_aseguradora = message_data.get('NombreCompleto')
            if not nombre_aseguradora:
                logger.warning("‚ö†Ô∏è  Mensaje sin NombreCompleto")
                return None
            
            logger.info(f"üîç Procesando aseguradora: {nombre_aseguradora}")
            
            # üöÄ GESTIONAR SESI√ìN DE LA ASEGURADORA
            if not self.gestionar_sesion_aseguradora(nombre_aseguradora, message_data):
                logger.error(f"‚ùå No se pudo gestionar la sesi√≥n para {nombre_aseguradora}")
                return None
            
            # Buscar URL en la base de datos (si no est√° en cache)
            url_info = self.get_url_by_aseguradora_name(nombre_aseguradora)
            
            if url_info:
                # Crear resultado combinado
                result = {
                    'aseguradora_info': message_data,
                    'url_info': url_info,
                    'procesado_en': datetime.now().isoformat(),
                    'sesion_activa': self.verificar_sesion_activa(nombre_aseguradora)
                }
                
                logger.info(f"‚úÖ Informaci√≥n completa encontrada para {nombre_aseguradora}")
                logger.info(f"   üåê URL Login: {url_info['url_login']}")
                if url_info.get('url_destino'):
                    logger.info(f"   üéØ URL Destino: {url_info['url_destino']}")
                
                # Mostrar campos de login
                if url_info.get('campos_login'):
                    logger.info(f"   üîê Campos de Login:")
                    for campo in url_info['campos_login']:
                        selector = campo['selector_html']
                        valor = campo['valor_dinamico'] or 'Sin valor'
                        logger.info(f"      ‚Ä¢ {selector}: {valor}")
                
                # Mostrar acciones post-login
                if url_info.get('acciones_post_login'):
                    logger.info(f"   üéØ Acciones Post-Login:")
                    for accion in url_info['acciones_post_login']:
                        tipo = accion['tipo_accion']
                        selector = accion['selector_html']
                        valor = accion['valor_dinamico'] or 'Sin valor'
                        logger.info(f"      ‚Ä¢ {tipo}: {selector} = {valor}")
                
                # Mostrar estado de la sesi√≥n
                if self.verificar_sesion_activa(nombre_aseguradora):
                    logger.info(f"‚úÖ Sesi√≥n activa para {nombre_aseguradora} - No se requiere nuevo login")
                    logger.info(f"   üìÖ Fecha de login: {self.sesiones_aseguradoras.get(nombre_aseguradora, {}).get('fecha_login', 'N/A')}")
                else:
                    logger.info(f"‚ÑπÔ∏è {nombre_aseguradora} no requiere login autom√°tico")
                
                return result
            else:
                logger.warning(f"‚ö†Ô∏è  No se encontr√≥ URL para {nombre_aseguradora}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Error procesando mensaje: {e}")
            return None
    
    def process_message(self, ch, method, properties, body):
        """Callback para procesar mensajes de RabbitMQ"""
        try:
            # Decodificar el mensaje
            message_text = body.decode('utf-8')
            logger.info(f"üì® Procesando mensaje #{method.delivery_tag}")
            
            # Parsear JSON
            try:
                message_data = json.loads(message_text)
                
                # Verificar si es un mensaje de aseguradora
                if 'NombreCompleto' in message_data:
                    # Procesar mensaje individual
                    result = self.process_aseguradora_message(message_data)
                    if result:
                        logger.info("‚úÖ Mensaje procesado exitosamente")
                        # Aqu√≠ podr√≠as guardar el resultado en otra tabla o hacer algo m√°s
                elif 'Clientes' in message_data and isinstance(message_data['Clientes'], list):
                    # Procesar lista de clientes
                    logger.info(f"üìã Procesando lista de {len(message_data['Clientes'])} clientes")
                    
                    for i, cliente in enumerate(message_data['Clientes']):
                        logger.info(f"  üîç Procesando cliente {i+1}/{len(message_data['Clientes'])}")
                        result = self.process_aseguradora_message(cliente)
                        if result:
                            logger.info(f"    ‚úÖ Cliente {i+1} procesado")
                        else:
                            logger.warning(f"    ‚ö†Ô∏è  Cliente {i+1} sin procesar")
                    
                    # Mostrar mensaje de espera despu√©s de procesar lista completa
                    logger.info("‚è≥ Lista de clientes procesada - Esperando siguiente mensaje...")
                else:
                    logger.warning("‚ö†Ô∏è  Formato de mensaje no reconocido")
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå Error parseando JSON: {e}")
            
            # Acknowledge el mensaje
            ch.basic_ack(delivery_tag=method.delivery_tag)
            
            # Mostrar mensaje de espera despu√©s de procesar
            logger.info("‚è≥ Mensaje procesado - Esperando siguiente mensaje...")
            
        except Exception as e:
            logger.error(f"‚ùå Error procesando mensaje: {e}")
            ch.basic_nack(delivery_tag=method.delivery_tag, requeue=False)
    
    def start_consuming(self):
        """Inicia el consumo de mensajes - SIEMPRE ACTIVO"""
        try:
            if not self.connect_rabbitmq():
                return
            
            # Obtener informaci√≥n de la cola
            queue_info = self.rabbitmq_channel.queue_declare(
                queue=Config.RABBITMQ_QUEUE, 
                durable=True, 
                passive=True
            )
            message_count = queue_info.method.message_count
            consumer_count = queue_info.method.consumer_count
            
            logger.info(f"üìä Cola: {Config.RABBITMQ_QUEUE}")
            logger.info(f"üìä Exchange: {Config.RABBITMQ_EXCHANGE}")
            logger.info(f"üìä Routing Key: {Config.RABBITMQ_ROUTING_KEY}")
            logger.info(f"üìà Mensajes en cola: {message_count}")
            logger.info(f"üë• Consumidores activos: {consumer_count}")
            
            # Configurar QoS para procesar un mensaje a la vez
            self.rabbitmq_channel.basic_qos(prefetch_count=1)
            
            # Consumir mensajes - SIEMPRE ACTIVO
            logger.info("üîÑ Iniciando consumo de mensajes...")
            logger.info("üí° Presiona Ctrl+C para detener")
            logger.info("‚è≥ Worker activo esperando mensajes...")
            
            # Configurar el consumidor para estar siempre activo
            self.rabbitmq_channel.basic_consume(
                queue=Config.RABBITMQ_QUEUE,
                on_message_callback=self.process_message,
                auto_ack=False  # Acknowledgment manual para mejor control
            )
            
            try:
                # BUCLE INFINITO - SIEMPRE ESPERANDO MENSAJES
                logger.info("üîÑ Worker iniciado - Esperando mensajes...")
                
                # Mostrar mensaje de espera cuando no hay mensajes
                if message_count == 0:
                    logger.info("‚è≥ No hay mensajes en cola - Esperando nuevos mensajes...")
                
                # Usar start_consuming() que mantiene el worker activo
                self.rabbitmq_channel.start_consuming()
                        
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è  Deteniendo consumo de mensajes...")
                self.rabbitmq_channel.stop_consuming()
                
        except Exception as e:
            logger.error(f"‚ùå Error en el consumo: {e}")
        finally:
            self.cleanup()
    
    def get_cache_stats(self):
        """Retorna estad√≠sticas del cach√©"""
        return {
            'total_cached': len(self.url_cache),
            'cached_aseguradoras': list(self.url_cache.keys())
        }
    
    def show_cache_stats(self):
        """Muestra estad√≠sticas del cach√© y sesiones"""
        stats = self.get_cache_stats()
        logger.info(f"üìä Estad√≠sticas del cach√©:")
        logger.info(f"   Total en cach√©: {stats['total_cached']}")
        if stats['cached_aseguradoras']:
            logger.info(f"   Aseguradoras en cach√©: {', '.join(stats['cached_aseguradoras'])}")
        else:
            logger.info("   Cach√© vac√≠o")
        
        # Mostrar estado de sesiones
        estado_sesiones = self.obtener_estado_sesiones()
        logger.info(f"üîê Estado de Sesiones:")
        logger.info(f"   Total activas: {estado_sesiones['total_activas']}")
        if estado_sesiones['aseguradoras_activas']:
            logger.info(f"   Aseguradoras con sesi√≥n activa: {', '.join(estado_sesiones['aseguradoras_activas'])}")
            # Mostrar detalles de cada sesi√≥n
            for aseguradora in estado_sesiones['aseguradoras_activas']:
                sesion_info = estado_sesiones['sesiones_detalle'].get(aseguradora, {})
                fecha_login = sesion_info.get('fecha_login', 'N/A')
                estado = sesion_info.get('estado', 'N/A')
                logger.info(f"      ‚Ä¢ {aseguradora}: {estado} (Login: {fecha_login})")
        else:
            logger.info("   No hay sesiones activas")
    
    def gestionar_sesion_aseguradora(self, nombre_aseguradora, datos_mensaje=None):
        """Gestiona la sesi√≥n de una aseguradora espec√≠fica"""
        try:
            # Verificar si es PAN AMERICAN LIFE DE ECUADOR
            if nombre_aseguradora == 'PAN AMERICAN LIFE DE ECUADOR':
                # Obtener configuraci√≥n de la aseguradora
                url_info = self.get_url_by_aseguradora_name(nombre_aseguradora)
                if not url_info:
                    logger.error(f"‚ùå No se pudo obtener configuraci√≥n para {nombre_aseguradora}")
                    return False
                
                # Verificar si ya tenemos una sesi√≥n activa
                if nombre_aseguradora in self.aseguradoras_activas:
                    logger.info(f"‚úÖ Sesi√≥n activa encontrada para {nombre_aseguradora}")
                    logger.info(f"üîÑ Ejecutando captura de informaci√≥n con NumDocIdentidad...")
                    
                    # SIEMPRE ejecutar captura de informaci√≥n, incluso con sesi√≥n activa
                    if self.capturar_informacion_pantalla(url_info['id'], nombre_aseguradora, datos_mensaje):
                        logger.info(f"‚úÖ Captura de informaci√≥n completada para {nombre_aseguradora}")
                        return True
                    else:
                        logger.error(f"‚ùå Error en captura de informaci√≥n para {nombre_aseguradora}")
                        return False
                
                # Si no hay sesi√≥n activa, hacer login completo
                logger.info(f"üîê Iniciando login para {nombre_aseguradora}")
                
                if self.execute_login(url_info, datos_mensaje):
                    # Marcar como activa
                    self.aseguradoras_activas.add(nombre_aseguradora)
                    self.sesiones_aseguradoras[nombre_aseguradora] = {
                        'fecha_login': datetime.now(),
                        'estado': 'activa',
                        'url_info': url_info
                    }
                    logger.info(f"‚úÖ Login exitoso para {nombre_aseguradora} - Sesi√≥n marcada como activa")
                    return True
                else:
                    logger.error(f"‚ùå Login fallido para {nombre_aseguradora}")
                    return False
            else:
                logger.info(f"‚ÑπÔ∏è {nombre_aseguradora} no requiere login autom√°tico")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Error gestionando sesi√≥n para {nombre_aseguradora}: {e}")
            return False
    
    def verificar_sesion_activa(self, nombre_aseguradora):
        """Verifica si una aseguradora tiene sesi√≥n activa y v√°lida"""
        if nombre_aseguradora not in self.aseguradoras_activas:
            return False
        
        # Verificar que el driver de Selenium est√© activo
        if not self.driver:
            logger.warning(f"‚ö†Ô∏è Driver de Selenium no disponible - Limpiando sesi√≥n de {nombre_aseguradora}")
            self.aseguradoras_activas.discard(nombre_aseguradora)
            if nombre_aseguradora in self.sesiones_aseguradoras:
                del self.sesiones_aseguradoras[nombre_aseguradora]
            return False
        
        # Verificar que la sesi√≥n no sea muy antigua (opcional - puedes ajustar el tiempo)
        sesion_info = self.sesiones_aseguradoras.get(nombre_aseguradora, {})
        if 'fecha_login' in sesion_info:
            tiempo_sesion = datetime.now() - sesion_info['fecha_login']
            if tiempo_sesion.total_seconds() > 3600:  # 1 hora
                logger.warning(f"‚ö†Ô∏è Sesi√≥n de {nombre_aseguradora} expirada (m√°s de 1 hora) - Limpiando")
                self.aseguradoras_activas.discard(nombre_aseguradora)
                if nombre_aseguradora in self.sesiones_aseguradoras:
                    del self.sesiones_aseguradoras[nombre_aseguradora]
                return False
        
        return True
    
    def obtener_estado_sesiones(self):
        """Retorna el estado de todas las sesiones activas"""
        return {
            'total_activas': len(self.aseguradoras_activas),
            'aseguradoras_activas': list(self.aseguradoras_activas),
            'sesiones_detalle': self.sesiones_aseguradoras
        }
    
    def cleanup(self):
        """Limpia las conexiones"""
        try:
            # Mostrar estad√≠sticas del cach√© antes de limpiar
            self.show_cache_stats()
            
            # Cerrar driver de Selenium
            if self.driver:
                try:
                    self.driver.quit()
                    logger.info("üîå Driver de Selenium cerrado")
                except Exception as e:
                    logger.error(f"‚ùå Error cerrando Selenium: {e}")
            
            if self.rabbitmq_channel and not self.rabbitmq_channel.is_closed:
                self.rabbitmq_channel.close()
            
            if self.rabbitmq_connection and not self.rabbitmq_connection.is_closed:
                self.rabbitmq_connection.close()
                
            logger.info("üîå Conexiones cerradas")
            
        except Exception as e:
            logger.error(f"‚ùå Error cerrando conexiones: {e}")

class ProductionWorker:
    def __init__(self):
        self.processor = None
        self.running = False
        self.start_time = None
        self.message_count = 0
        
        # Configurar se√±ales para shutdown graceful
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
    
    def signal_handler(self, signum, frame):
        """Maneja se√±ales de interrupci√≥n"""
        logger.info(f"üì° Se√±al recibida: {signum}")
        self.shutdown()
    
    def startup(self):
        """Inicia el worker"""
        try:
            logger.info("üöÄ Iniciando Worker de Producci√≥n...")
            logger.info("=" * 60)
            logger.info("üìã Configuraci√≥n del Sistema:")
            logger.info("   ‚Ä¢ RabbitMQ: aseguradora_queue")
            logger.info("   ‚Ä¢ Base de Datos: SQL Server")
            logger.info("   ‚Ä¢ Cach√©: URLs de aseguradoras")
            logger.info("   ‚Ä¢ Logs: Archivo + Consola")
            logger.info("   ‚Ä¢ Modo: SIEMPRE ACTIVO - Esperando mensajes")
            logger.info("=" * 60)
            
            self.start_time = datetime.now()
            self.running = True
            
            # Crear procesador
            self.processor = AseguradoraProcessor()
            
            # Mostrar estad√≠sticas iniciales
            self.show_status()
            
            logger.info("üîÑ Iniciando procesador de mensajes...")
            logger.info("‚è≥ Worker en modo PRODUCCI√ìN - Siempre activo")
            logger.info("üí° Presiona Ctrl+C para detener")
            logger.info("=" * 60)
            
            # Iniciar consumo de mensajes (SIEMPRE ACTIVO)
            self.processor.start_consuming()
            
        except Exception as e:
            logger.error(f"‚ùå Error en startup: {e}")
            self.shutdown()
    
    def show_status(self):
        """Muestra el estado actual del worker"""
        if self.start_time:
            uptime = datetime.now() - self.start_time
            logger.info(f"üìä Estado del Worker:")
            logger.info(f"   ‚Ä¢ Tiempo activo: {uptime}")
            logger.info(f"   ‚Ä¢ Mensajes procesados: {self.message_count}")
            logger.info(f"   ‚Ä¢ Estado: {'üü¢ Activo' if self.running else 'üî¥ Detenido'}")
    
    def shutdown(self):
        """Detiene el worker de forma graceful"""
        logger.info("‚èπÔ∏è  Iniciando shutdown graceful...")
        self.running = False
        
        if self.processor:
            try:
                self.processor.cleanup()
            except Exception as e:
                logger.error(f"‚ùå Error en cleanup: {e}")
        
        logger.info("üîå Worker detenido correctamente")
        sys.exit(0)

def main():
    """Funci√≥n principal"""
    worker = ProductionWorker()
    
    try:
        worker.startup()
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è  Interrupci√≥n por teclado")
        worker.shutdown()
    except Exception as e:
        logger.error(f"‚ùå Error fatal: {e}")
        worker.shutdown()

if __name__ == "__main__":
    main()
